
Simple_Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002622  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  00002622  000026b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800072  00800072  000026c8  2**0
                  ALLOC
  3 .stab         00001e18  00000000  00000000  000026c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d9d  00000000  00000000  000044e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000527d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000053bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000552d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007176  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008061  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008e10  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00008f70  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  000091fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000099cb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e2       	ldi	r30, 0x22	; 34
      68:	f6 e2       	ldi	r31, 0x26	; 38
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 37       	cpi	r26, 0x72	; 114
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e7       	ldi	r26, 0x72	; 114
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 37       	cpi	r26, 0x7C	; 124
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 5e 08 	call	0x10bc	; 0x10bc <main>
      8a:	0c 94 0f 13 	jmp	0x261e	; 0x261e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 a7 12 	jmp	0x254e	; 0x254e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa e6       	ldi	r26, 0x6A	; 106
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c3 12 	jmp	0x2586	; 0x2586 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b3 12 	jmp	0x2566	; 0x2566 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 cf 12 	jmp	0x259e	; 0x259e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b3 12 	jmp	0x2566	; 0x2566 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 cf 12 	jmp	0x259e	; 0x259e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 a7 12 	jmp	0x254e	; 0x254e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8a e6       	ldi	r24, 0x6A	; 106
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c3 12 	jmp	0x2586	; 0x2586 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b3 12 	jmp	0x2566	; 0x2566 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 cf 12 	jmp	0x259e	; 0x259e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 b3 12 	jmp	0x2566	; 0x2566 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 cf 12 	jmp	0x259e	; 0x259e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 b3 12 	jmp	0x2566	; 0x2566 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 cf 12 	jmp	0x259e	; 0x259e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 b7 12 	jmp	0x256e	; 0x256e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 d3 12 	jmp	0x25a6	; 0x25a6 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <SimpleCalculator_getFirst_Number>:
 * Description:
 * 1. get the first input number
 * 2. get the first input operand
 */
void SimpleCalculator_getFirst_Number()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	60 97       	sbiw	r28, 0x10	; 16
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	04 c1       	rjmp	.+520    	; 0xd64 <SimpleCalculator_getFirst_Number+0x21e>
	while(num1_flag==0)
	{
		key=KEYPAD_getPressedKey();
     b5c:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <KEYPAD_getPressedKey>
     b60:	80 93 7b 00 	sts	0x007B, r24

		switch(key)
     b64:	80 91 7b 00 	lds	r24, 0x007B
     b68:	28 2f       	mov	r18, r24
     b6a:	30 e0       	ldi	r19, 0x00	; 0
     b6c:	38 8b       	std	Y+16, r19	; 0x10
     b6e:	2f 87       	std	Y+15, r18	; 0x0f
     b70:	8f 85       	ldd	r24, Y+15	; 0x0f
     b72:	98 89       	ldd	r25, Y+16	; 0x10
     b74:	8b 32       	cpi	r24, 0x2B	; 43
     b76:	91 05       	cpc	r25, r1
     b78:	e9 f1       	breq	.+122    	; 0xbf4 <SimpleCalculator_getFirst_Number+0xae>
     b7a:	2f 85       	ldd	r18, Y+15	; 0x0f
     b7c:	38 89       	ldd	r19, Y+16	; 0x10
     b7e:	2c 32       	cpi	r18, 0x2C	; 44
     b80:	31 05       	cpc	r19, r1
     b82:	64 f4       	brge	.+24     	; 0xb9c <SimpleCalculator_getFirst_Number+0x56>
     b84:	8f 85       	ldd	r24, Y+15	; 0x0f
     b86:	98 89       	ldd	r25, Y+16	; 0x10
     b88:	8d 30       	cpi	r24, 0x0D	; 13
     b8a:	91 05       	cpc	r25, r1
     b8c:	c1 f0       	breq	.+48     	; 0xbbe <SimpleCalculator_getFirst_Number+0x78>
     b8e:	2f 85       	ldd	r18, Y+15	; 0x0f
     b90:	38 89       	ldd	r19, Y+16	; 0x10
     b92:	2a 32       	cpi	r18, 0x2A	; 42
     b94:	31 05       	cpc	r19, r1
     b96:	09 f4       	brne	.+2      	; 0xb9a <SimpleCalculator_getFirst_Number+0x54>
     b98:	41 c0       	rjmp	.+130    	; 0xc1c <SimpleCalculator_getFirst_Number+0xd6>
     b9a:	54 c0       	rjmp	.+168    	; 0xc44 <SimpleCalculator_getFirst_Number+0xfe>
     b9c:	8f 85       	ldd	r24, Y+15	; 0x0f
     b9e:	98 89       	ldd	r25, Y+16	; 0x10
     ba0:	8f 32       	cpi	r24, 0x2F	; 47
     ba2:	91 05       	cpc	r25, r1
     ba4:	09 f4       	brne	.+2      	; 0xba8 <SimpleCalculator_getFirst_Number+0x62>
     ba6:	44 c0       	rjmp	.+136    	; 0xc30 <SimpleCalculator_getFirst_Number+0xea>
     ba8:	2f 85       	ldd	r18, Y+15	; 0x0f
     baa:	38 89       	ldd	r19, Y+16	; 0x10
     bac:	2d 33       	cpi	r18, 0x3D	; 61
     bae:	31 05       	cpc	r19, r1
     bb0:	b1 f0       	breq	.+44     	; 0xbde <SimpleCalculator_getFirst_Number+0x98>
     bb2:	8f 85       	ldd	r24, Y+15	; 0x0f
     bb4:	98 89       	ldd	r25, Y+16	; 0x10
     bb6:	8d 32       	cpi	r24, 0x2D	; 45
     bb8:	91 05       	cpc	r25, r1
     bba:	31 f1       	breq	.+76     	; 0xc08 <SimpleCalculator_getFirst_Number+0xc2>
     bbc:	43 c0       	rjmp	.+134    	; 0xc44 <SimpleCalculator_getFirst_Number+0xfe>
		{
		/* clear Button */
		case 13:
			LCD_sendCommand(LCD_CLEAR_COMMAND);
     bbe:	81 e0       	ldi	r24, 0x01	; 1
     bc0:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <LCD_sendCommand>
			num1=0;
     bc4:	10 92 75 00 	sts	0x0075, r1
     bc8:	10 92 74 00 	sts	0x0074, r1
			num2=0;
     bcc:	10 92 77 00 	sts	0x0077, r1
     bd0:	10 92 76 00 	sts	0x0076, r1
			num1_flag=0;
     bd4:	10 92 72 00 	sts	0x0072, r1
			num2_flag=0;
     bd8:	10 92 73 00 	sts	0x0073, r1
     bdc:	51 c0       	rjmp	.+162    	; 0xc80 <SimpleCalculator_getFirst_Number+0x13a>
			break;
		/*  '=' sign after first number */
		case '=':
			LCD_moveCursor(1,0);
     bde:	81 e0       	ldi	r24, 0x01	; 1
     be0:	60 e0       	ldi	r22, 0x00	; 0
     be2:	0e 94 0b 12 	call	0x2416	; 0x2416 <LCD_moveCursor>
			LCD_displayCharacter('=');
     be6:	8d e3       	ldi	r24, 0x3D	; 61
     be8:	0e 94 57 0f 	call	0x1eae	; 0x1eae <LCD_displayCharacter>
			num1_flag=1;
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	80 93 72 00 	sts	0x0072, r24
     bf2:	46 c0       	rjmp	.+140    	; 0xc80 <SimpleCalculator_getFirst_Number+0x13a>
			break;
		/* end of first number and first operand */
		case '+':
			LCD_displayCharacter('+');
     bf4:	8b e2       	ldi	r24, 0x2B	; 43
     bf6:	0e 94 57 0f 	call	0x1eae	; 0x1eae <LCD_displayCharacter>
			first_operand='+';
     bfa:	8b e2       	ldi	r24, 0x2B	; 43
     bfc:	80 93 7a 00 	sts	0x007A, r24
			num1_flag=1;
     c00:	81 e0       	ldi	r24, 0x01	; 1
     c02:	80 93 72 00 	sts	0x0072, r24
     c06:	3c c0       	rjmp	.+120    	; 0xc80 <SimpleCalculator_getFirst_Number+0x13a>
			break;
		case '-':
			LCD_displayCharacter('-');
     c08:	8d e2       	ldi	r24, 0x2D	; 45
     c0a:	0e 94 57 0f 	call	0x1eae	; 0x1eae <LCD_displayCharacter>
			first_operand='-';
     c0e:	8d e2       	ldi	r24, 0x2D	; 45
     c10:	80 93 7a 00 	sts	0x007A, r24
			num1_flag=1;
     c14:	81 e0       	ldi	r24, 0x01	; 1
     c16:	80 93 72 00 	sts	0x0072, r24
     c1a:	32 c0       	rjmp	.+100    	; 0xc80 <SimpleCalculator_getFirst_Number+0x13a>
			break;
		case '*':
			LCD_displayCharacter('*');
     c1c:	8a e2       	ldi	r24, 0x2A	; 42
     c1e:	0e 94 57 0f 	call	0x1eae	; 0x1eae <LCD_displayCharacter>
			first_operand='*';
     c22:	8a e2       	ldi	r24, 0x2A	; 42
     c24:	80 93 7a 00 	sts	0x007A, r24
			num1_flag=1;
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	80 93 72 00 	sts	0x0072, r24
     c2e:	28 c0       	rjmp	.+80     	; 0xc80 <SimpleCalculator_getFirst_Number+0x13a>
			break;
		case '/':
			LCD_displayCharacter('/');
     c30:	8f e2       	ldi	r24, 0x2F	; 47
     c32:	0e 94 57 0f 	call	0x1eae	; 0x1eae <LCD_displayCharacter>
			first_operand='/';
     c36:	8f e2       	ldi	r24, 0x2F	; 47
     c38:	80 93 7a 00 	sts	0x007A, r24
			num1_flag=1;
     c3c:	81 e0       	ldi	r24, 0x01	; 1
     c3e:	80 93 72 00 	sts	0x0072, r24
     c42:	1e c0       	rjmp	.+60     	; 0xc80 <SimpleCalculator_getFirst_Number+0x13a>
			break;
		/* the num1 is still inserted */
		default:
			LCD_integerToString(key);
     c44:	80 91 7b 00 	lds	r24, 0x007B
     c48:	88 2f       	mov	r24, r24
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	0e 94 66 12 	call	0x24cc	; 0x24cc <LCD_integerToString>
			num1=num1*10+ key;
     c50:	80 91 74 00 	lds	r24, 0x0074
     c54:	90 91 75 00 	lds	r25, 0x0075
     c58:	9c 01       	movw	r18, r24
     c5a:	22 0f       	add	r18, r18
     c5c:	33 1f       	adc	r19, r19
     c5e:	c9 01       	movw	r24, r18
     c60:	88 0f       	add	r24, r24
     c62:	99 1f       	adc	r25, r25
     c64:	88 0f       	add	r24, r24
     c66:	99 1f       	adc	r25, r25
     c68:	28 0f       	add	r18, r24
     c6a:	39 1f       	adc	r19, r25
     c6c:	80 91 7b 00 	lds	r24, 0x007B
     c70:	88 2f       	mov	r24, r24
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	82 0f       	add	r24, r18
     c76:	93 1f       	adc	r25, r19
     c78:	90 93 75 00 	sts	0x0075, r25
     c7c:	80 93 74 00 	sts	0x0074, r24
     c80:	80 e0       	ldi	r24, 0x00	; 0
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	aa ef       	ldi	r26, 0xFA	; 250
     c86:	b3 e4       	ldi	r27, 0x43	; 67
     c88:	8b 87       	std	Y+11, r24	; 0x0b
     c8a:	9c 87       	std	Y+12, r25	; 0x0c
     c8c:	ad 87       	std	Y+13, r26	; 0x0d
     c8e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c90:	6b 85       	ldd	r22, Y+11	; 0x0b
     c92:	7c 85       	ldd	r23, Y+12	; 0x0c
     c94:	8d 85       	ldd	r24, Y+13	; 0x0d
     c96:	9e 85       	ldd	r25, Y+14	; 0x0e
     c98:	20 e0       	ldi	r18, 0x00	; 0
     c9a:	30 e0       	ldi	r19, 0x00	; 0
     c9c:	4a e7       	ldi	r20, 0x7A	; 122
     c9e:	55 e4       	ldi	r21, 0x45	; 69
     ca0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ca4:	dc 01       	movw	r26, r24
     ca6:	cb 01       	movw	r24, r22
     ca8:	8f 83       	std	Y+7, r24	; 0x07
     caa:	98 87       	std	Y+8, r25	; 0x08
     cac:	a9 87       	std	Y+9, r26	; 0x09
     cae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     cb0:	6f 81       	ldd	r22, Y+7	; 0x07
     cb2:	78 85       	ldd	r23, Y+8	; 0x08
     cb4:	89 85       	ldd	r24, Y+9	; 0x09
     cb6:	9a 85       	ldd	r25, Y+10	; 0x0a
     cb8:	20 e0       	ldi	r18, 0x00	; 0
     cba:	30 e0       	ldi	r19, 0x00	; 0
     cbc:	40 e8       	ldi	r20, 0x80	; 128
     cbe:	5f e3       	ldi	r21, 0x3F	; 63
     cc0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     cc4:	88 23       	and	r24, r24
     cc6:	2c f4       	brge	.+10     	; 0xcd2 <SimpleCalculator_getFirst_Number+0x18c>
		__ticks = 1;
     cc8:	81 e0       	ldi	r24, 0x01	; 1
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	9e 83       	std	Y+6, r25	; 0x06
     cce:	8d 83       	std	Y+5, r24	; 0x05
     cd0:	3f c0       	rjmp	.+126    	; 0xd50 <SimpleCalculator_getFirst_Number+0x20a>
	else if (__tmp > 65535)
     cd2:	6f 81       	ldd	r22, Y+7	; 0x07
     cd4:	78 85       	ldd	r23, Y+8	; 0x08
     cd6:	89 85       	ldd	r24, Y+9	; 0x09
     cd8:	9a 85       	ldd	r25, Y+10	; 0x0a
     cda:	20 e0       	ldi	r18, 0x00	; 0
     cdc:	3f ef       	ldi	r19, 0xFF	; 255
     cde:	4f e7       	ldi	r20, 0x7F	; 127
     ce0:	57 e4       	ldi	r21, 0x47	; 71
     ce2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ce6:	18 16       	cp	r1, r24
     ce8:	4c f5       	brge	.+82     	; 0xd3c <SimpleCalculator_getFirst_Number+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cea:	6b 85       	ldd	r22, Y+11	; 0x0b
     cec:	7c 85       	ldd	r23, Y+12	; 0x0c
     cee:	8d 85       	ldd	r24, Y+13	; 0x0d
     cf0:	9e 85       	ldd	r25, Y+14	; 0x0e
     cf2:	20 e0       	ldi	r18, 0x00	; 0
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	40 e2       	ldi	r20, 0x20	; 32
     cf8:	51 e4       	ldi	r21, 0x41	; 65
     cfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cfe:	dc 01       	movw	r26, r24
     d00:	cb 01       	movw	r24, r22
     d02:	bc 01       	movw	r22, r24
     d04:	cd 01       	movw	r24, r26
     d06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d0a:	dc 01       	movw	r26, r24
     d0c:	cb 01       	movw	r24, r22
     d0e:	9e 83       	std	Y+6, r25	; 0x06
     d10:	8d 83       	std	Y+5, r24	; 0x05
     d12:	0f c0       	rjmp	.+30     	; 0xd32 <SimpleCalculator_getFirst_Number+0x1ec>
     d14:	80 e9       	ldi	r24, 0x90	; 144
     d16:	91 e0       	ldi	r25, 0x01	; 1
     d18:	9c 83       	std	Y+4, r25	; 0x04
     d1a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d1c:	8b 81       	ldd	r24, Y+3	; 0x03
     d1e:	9c 81       	ldd	r25, Y+4	; 0x04
     d20:	01 97       	sbiw	r24, 0x01	; 1
     d22:	f1 f7       	brne	.-4      	; 0xd20 <SimpleCalculator_getFirst_Number+0x1da>
     d24:	9c 83       	std	Y+4, r25	; 0x04
     d26:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d28:	8d 81       	ldd	r24, Y+5	; 0x05
     d2a:	9e 81       	ldd	r25, Y+6	; 0x06
     d2c:	01 97       	sbiw	r24, 0x01	; 1
     d2e:	9e 83       	std	Y+6, r25	; 0x06
     d30:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d32:	8d 81       	ldd	r24, Y+5	; 0x05
     d34:	9e 81       	ldd	r25, Y+6	; 0x06
     d36:	00 97       	sbiw	r24, 0x00	; 0
     d38:	69 f7       	brne	.-38     	; 0xd14 <SimpleCalculator_getFirst_Number+0x1ce>
     d3a:	14 c0       	rjmp	.+40     	; 0xd64 <SimpleCalculator_getFirst_Number+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d3c:	6f 81       	ldd	r22, Y+7	; 0x07
     d3e:	78 85       	ldd	r23, Y+8	; 0x08
     d40:	89 85       	ldd	r24, Y+9	; 0x09
     d42:	9a 85       	ldd	r25, Y+10	; 0x0a
     d44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d48:	dc 01       	movw	r26, r24
     d4a:	cb 01       	movw	r24, r22
     d4c:	9e 83       	std	Y+6, r25	; 0x06
     d4e:	8d 83       	std	Y+5, r24	; 0x05
     d50:	8d 81       	ldd	r24, Y+5	; 0x05
     d52:	9e 81       	ldd	r25, Y+6	; 0x06
     d54:	9a 83       	std	Y+2, r25	; 0x02
     d56:	89 83       	std	Y+1, r24	; 0x01
     d58:	89 81       	ldd	r24, Y+1	; 0x01
     d5a:	9a 81       	ldd	r25, Y+2	; 0x02
     d5c:	01 97       	sbiw	r24, 0x01	; 1
     d5e:	f1 f7       	brne	.-4      	; 0xd5c <SimpleCalculator_getFirst_Number+0x216>
     d60:	9a 83       	std	Y+2, r25	; 0x02
     d62:	89 83       	std	Y+1, r24	; 0x01
 * 1. get the first input number
 * 2. get the first input operand
 */
void SimpleCalculator_getFirst_Number()
{
	while(num1_flag==0)
     d64:	80 91 72 00 	lds	r24, 0x0072
     d68:	88 23       	and	r24, r24
     d6a:	09 f4       	brne	.+2      	; 0xd6e <SimpleCalculator_getFirst_Number+0x228>
     d6c:	f7 ce       	rjmp	.-530    	; 0xb5c <SimpleCalculator_getFirst_Number+0x16>
			num1=num1*10+ key;
			break;
		}
		_delay_ms(500);
	}
	num1_flag=0;
     d6e:	10 92 72 00 	sts	0x0072, r1
}
     d72:	60 96       	adiw	r28, 0x10	; 16
     d74:	0f b6       	in	r0, 0x3f	; 63
     d76:	f8 94       	cli
     d78:	de bf       	out	0x3e, r29	; 62
     d7a:	0f be       	out	0x3f, r0	; 63
     d7c:	cd bf       	out	0x3d, r28	; 61
     d7e:	cf 91       	pop	r28
     d80:	df 91       	pop	r29
     d82:	08 95       	ret

00000d84 <SimpleCalculator_getSecond_Number>:

void SimpleCalculator_getSecond_Number()
{
     d84:	df 93       	push	r29
     d86:	cf 93       	push	r28
     d88:	cd b7       	in	r28, 0x3d	; 61
     d8a:	de b7       	in	r29, 0x3e	; 62
     d8c:	60 97       	sbiw	r28, 0x10	; 16
     d8e:	0f b6       	in	r0, 0x3f	; 63
     d90:	f8 94       	cli
     d92:	de bf       	out	0x3e, r29	; 62
     d94:	0f be       	out	0x3f, r0	; 63
     d96:	cd bf       	out	0x3d, r28	; 61
     d98:	ed c0       	rjmp	.+474    	; 0xf74 <SimpleCalculator_getSecond_Number+0x1f0>
	while(num2_flag==0)
	{
		key=KEYPAD_getPressedKey();
     d9a:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <KEYPAD_getPressedKey>
     d9e:	80 93 7b 00 	sts	0x007B, r24

		switch(key)
     da2:	80 91 7b 00 	lds	r24, 0x007B
     da6:	28 2f       	mov	r18, r24
     da8:	30 e0       	ldi	r19, 0x00	; 0
     daa:	38 8b       	std	Y+16, r19	; 0x10
     dac:	2f 87       	std	Y+15, r18	; 0x0f
     dae:	8f 85       	ldd	r24, Y+15	; 0x0f
     db0:	98 89       	ldd	r25, Y+16	; 0x10
     db2:	8b 32       	cpi	r24, 0x2B	; 43
     db4:	91 05       	cpc	r25, r1
     db6:	09 f4       	brne	.+2      	; 0xdba <SimpleCalculator_getSecond_Number+0x36>
     db8:	3d c0       	rjmp	.+122    	; 0xe34 <SimpleCalculator_getSecond_Number+0xb0>
     dba:	2f 85       	ldd	r18, Y+15	; 0x0f
     dbc:	38 89       	ldd	r19, Y+16	; 0x10
     dbe:	2c 32       	cpi	r18, 0x2C	; 44
     dc0:	31 05       	cpc	r19, r1
     dc2:	5c f4       	brge	.+22     	; 0xdda <SimpleCalculator_getSecond_Number+0x56>
     dc4:	8f 85       	ldd	r24, Y+15	; 0x0f
     dc6:	98 89       	ldd	r25, Y+16	; 0x10
     dc8:	8d 30       	cpi	r24, 0x0D	; 13
     dca:	91 05       	cpc	r25, r1
     dcc:	b1 f0       	breq	.+44     	; 0xdfa <SimpleCalculator_getSecond_Number+0x76>
     dce:	2f 85       	ldd	r18, Y+15	; 0x0f
     dd0:	38 89       	ldd	r19, Y+16	; 0x10
     dd2:	2a 32       	cpi	r18, 0x2A	; 42
     dd4:	31 05       	cpc	r19, r1
     dd6:	b1 f1       	breq	.+108    	; 0xe44 <SimpleCalculator_getSecond_Number+0xc0>
     dd8:	3d c0       	rjmp	.+122    	; 0xe54 <SimpleCalculator_getSecond_Number+0xd0>
     dda:	8f 85       	ldd	r24, Y+15	; 0x0f
     ddc:	98 89       	ldd	r25, Y+16	; 0x10
     dde:	8f 32       	cpi	r24, 0x2F	; 47
     de0:	91 05       	cpc	r25, r1
     de2:	a1 f1       	breq	.+104    	; 0xe4c <SimpleCalculator_getSecond_Number+0xc8>
     de4:	2f 85       	ldd	r18, Y+15	; 0x0f
     de6:	38 89       	ldd	r19, Y+16	; 0x10
     de8:	2d 33       	cpi	r18, 0x3D	; 61
     dea:	31 05       	cpc	r19, r1
     dec:	b1 f0       	breq	.+44     	; 0xe1a <SimpleCalculator_getSecond_Number+0x96>
     dee:	8f 85       	ldd	r24, Y+15	; 0x0f
     df0:	98 89       	ldd	r25, Y+16	; 0x10
     df2:	8d 32       	cpi	r24, 0x2D	; 45
     df4:	91 05       	cpc	r25, r1
     df6:	11 f1       	breq	.+68     	; 0xe3c <SimpleCalculator_getSecond_Number+0xb8>
     df8:	2d c0       	rjmp	.+90     	; 0xe54 <SimpleCalculator_getSecond_Number+0xd0>
		{
		/* clear Button */
		case 13:
			LCD_sendCommand(LCD_CLEAR_COMMAND);
     dfa:	81 e0       	ldi	r24, 0x01	; 1
     dfc:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <LCD_sendCommand>
			num1=0;
     e00:	10 92 75 00 	sts	0x0075, r1
     e04:	10 92 74 00 	sts	0x0074, r1
			num2=0;
     e08:	10 92 77 00 	sts	0x0077, r1
     e0c:	10 92 76 00 	sts	0x0076, r1
			num1_flag=0;
     e10:	10 92 72 00 	sts	0x0072, r1
			num2_flag=0;
     e14:	10 92 73 00 	sts	0x0073, r1
     e18:	3b c0       	rjmp	.+118    	; 0xe90 <SimpleCalculator_getSecond_Number+0x10c>
			break;
		/* '=' means num2 is inserted and go to printResult on the second line */
		case '=':
			LCD_moveCursor(1,0);
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	60 e0       	ldi	r22, 0x00	; 0
     e1e:	0e 94 0b 12 	call	0x2416	; 0x2416 <LCD_moveCursor>
			LCD_displayCharacter('=');
     e22:	8d e3       	ldi	r24, 0x3D	; 61
     e24:	0e 94 57 0f 	call	0x1eae	; 0x1eae <LCD_displayCharacter>
			num2_flag=1;
     e28:	81 e0       	ldi	r24, 0x01	; 1
     e2a:	80 93 73 00 	sts	0x0073, r24
			SimpleCalculator_printResult();
     e2e:	0e 94 ca 07 	call	0xf94	; 0xf94 <SimpleCalculator_printResult>
     e32:	2e c0       	rjmp	.+92     	; 0xe90 <SimpleCalculator_getSecond_Number+0x10c>
			break;
		case '+':
			LCD_displayCharacter('+');
     e34:	8b e2       	ldi	r24, 0x2B	; 43
     e36:	0e 94 57 0f 	call	0x1eae	; 0x1eae <LCD_displayCharacter>
     e3a:	2a c0       	rjmp	.+84     	; 0xe90 <SimpleCalculator_getSecond_Number+0x10c>
			break;
		case '-':
			LCD_displayCharacter('-');
     e3c:	8d e2       	ldi	r24, 0x2D	; 45
     e3e:	0e 94 57 0f 	call	0x1eae	; 0x1eae <LCD_displayCharacter>
     e42:	26 c0       	rjmp	.+76     	; 0xe90 <SimpleCalculator_getSecond_Number+0x10c>
			break;
		case '*':
			LCD_displayCharacter('*');
     e44:	8a e2       	ldi	r24, 0x2A	; 42
     e46:	0e 94 57 0f 	call	0x1eae	; 0x1eae <LCD_displayCharacter>
     e4a:	22 c0       	rjmp	.+68     	; 0xe90 <SimpleCalculator_getSecond_Number+0x10c>
			break;
		case '/':
			LCD_displayCharacter('/');
     e4c:	8f e2       	ldi	r24, 0x2F	; 47
     e4e:	0e 94 57 0f 	call	0x1eae	; 0x1eae <LCD_displayCharacter>
     e52:	1e c0       	rjmp	.+60     	; 0xe90 <SimpleCalculator_getSecond_Number+0x10c>
			break;
		/* the num2 is still inserted */
		default:
			LCD_integerToString(key);
     e54:	80 91 7b 00 	lds	r24, 0x007B
     e58:	88 2f       	mov	r24, r24
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	0e 94 66 12 	call	0x24cc	; 0x24cc <LCD_integerToString>
			num2=num2*10+ key;
     e60:	80 91 76 00 	lds	r24, 0x0076
     e64:	90 91 77 00 	lds	r25, 0x0077
     e68:	9c 01       	movw	r18, r24
     e6a:	22 0f       	add	r18, r18
     e6c:	33 1f       	adc	r19, r19
     e6e:	c9 01       	movw	r24, r18
     e70:	88 0f       	add	r24, r24
     e72:	99 1f       	adc	r25, r25
     e74:	88 0f       	add	r24, r24
     e76:	99 1f       	adc	r25, r25
     e78:	28 0f       	add	r18, r24
     e7a:	39 1f       	adc	r19, r25
     e7c:	80 91 7b 00 	lds	r24, 0x007B
     e80:	88 2f       	mov	r24, r24
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	82 0f       	add	r24, r18
     e86:	93 1f       	adc	r25, r19
     e88:	90 93 77 00 	sts	0x0077, r25
     e8c:	80 93 76 00 	sts	0x0076, r24
     e90:	80 e0       	ldi	r24, 0x00	; 0
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	a8 ec       	ldi	r26, 0xC8	; 200
     e96:	b3 e4       	ldi	r27, 0x43	; 67
     e98:	8b 87       	std	Y+11, r24	; 0x0b
     e9a:	9c 87       	std	Y+12, r25	; 0x0c
     e9c:	ad 87       	std	Y+13, r26	; 0x0d
     e9e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ea0:	6b 85       	ldd	r22, Y+11	; 0x0b
     ea2:	7c 85       	ldd	r23, Y+12	; 0x0c
     ea4:	8d 85       	ldd	r24, Y+13	; 0x0d
     ea6:	9e 85       	ldd	r25, Y+14	; 0x0e
     ea8:	20 e0       	ldi	r18, 0x00	; 0
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	4a e7       	ldi	r20, 0x7A	; 122
     eae:	55 e4       	ldi	r21, 0x45	; 69
     eb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eb4:	dc 01       	movw	r26, r24
     eb6:	cb 01       	movw	r24, r22
     eb8:	8f 83       	std	Y+7, r24	; 0x07
     eba:	98 87       	std	Y+8, r25	; 0x08
     ebc:	a9 87       	std	Y+9, r26	; 0x09
     ebe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ec0:	6f 81       	ldd	r22, Y+7	; 0x07
     ec2:	78 85       	ldd	r23, Y+8	; 0x08
     ec4:	89 85       	ldd	r24, Y+9	; 0x09
     ec6:	9a 85       	ldd	r25, Y+10	; 0x0a
     ec8:	20 e0       	ldi	r18, 0x00	; 0
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	40 e8       	ldi	r20, 0x80	; 128
     ece:	5f e3       	ldi	r21, 0x3F	; 63
     ed0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ed4:	88 23       	and	r24, r24
     ed6:	2c f4       	brge	.+10     	; 0xee2 <SimpleCalculator_getSecond_Number+0x15e>
		__ticks = 1;
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	9e 83       	std	Y+6, r25	; 0x06
     ede:	8d 83       	std	Y+5, r24	; 0x05
     ee0:	3f c0       	rjmp	.+126    	; 0xf60 <SimpleCalculator_getSecond_Number+0x1dc>
	else if (__tmp > 65535)
     ee2:	6f 81       	ldd	r22, Y+7	; 0x07
     ee4:	78 85       	ldd	r23, Y+8	; 0x08
     ee6:	89 85       	ldd	r24, Y+9	; 0x09
     ee8:	9a 85       	ldd	r25, Y+10	; 0x0a
     eea:	20 e0       	ldi	r18, 0x00	; 0
     eec:	3f ef       	ldi	r19, 0xFF	; 255
     eee:	4f e7       	ldi	r20, 0x7F	; 127
     ef0:	57 e4       	ldi	r21, 0x47	; 71
     ef2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ef6:	18 16       	cp	r1, r24
     ef8:	4c f5       	brge	.+82     	; 0xf4c <SimpleCalculator_getSecond_Number+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     efa:	6b 85       	ldd	r22, Y+11	; 0x0b
     efc:	7c 85       	ldd	r23, Y+12	; 0x0c
     efe:	8d 85       	ldd	r24, Y+13	; 0x0d
     f00:	9e 85       	ldd	r25, Y+14	; 0x0e
     f02:	20 e0       	ldi	r18, 0x00	; 0
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	40 e2       	ldi	r20, 0x20	; 32
     f08:	51 e4       	ldi	r21, 0x41	; 65
     f0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f0e:	dc 01       	movw	r26, r24
     f10:	cb 01       	movw	r24, r22
     f12:	bc 01       	movw	r22, r24
     f14:	cd 01       	movw	r24, r26
     f16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f1a:	dc 01       	movw	r26, r24
     f1c:	cb 01       	movw	r24, r22
     f1e:	9e 83       	std	Y+6, r25	; 0x06
     f20:	8d 83       	std	Y+5, r24	; 0x05
     f22:	0f c0       	rjmp	.+30     	; 0xf42 <SimpleCalculator_getSecond_Number+0x1be>
     f24:	80 e9       	ldi	r24, 0x90	; 144
     f26:	91 e0       	ldi	r25, 0x01	; 1
     f28:	9c 83       	std	Y+4, r25	; 0x04
     f2a:	8b 83       	std	Y+3, r24	; 0x03
     f2c:	8b 81       	ldd	r24, Y+3	; 0x03
     f2e:	9c 81       	ldd	r25, Y+4	; 0x04
     f30:	01 97       	sbiw	r24, 0x01	; 1
     f32:	f1 f7       	brne	.-4      	; 0xf30 <SimpleCalculator_getSecond_Number+0x1ac>
     f34:	9c 83       	std	Y+4, r25	; 0x04
     f36:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f38:	8d 81       	ldd	r24, Y+5	; 0x05
     f3a:	9e 81       	ldd	r25, Y+6	; 0x06
     f3c:	01 97       	sbiw	r24, 0x01	; 1
     f3e:	9e 83       	std	Y+6, r25	; 0x06
     f40:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f42:	8d 81       	ldd	r24, Y+5	; 0x05
     f44:	9e 81       	ldd	r25, Y+6	; 0x06
     f46:	00 97       	sbiw	r24, 0x00	; 0
     f48:	69 f7       	brne	.-38     	; 0xf24 <SimpleCalculator_getSecond_Number+0x1a0>
     f4a:	14 c0       	rjmp	.+40     	; 0xf74 <SimpleCalculator_getSecond_Number+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f4c:	6f 81       	ldd	r22, Y+7	; 0x07
     f4e:	78 85       	ldd	r23, Y+8	; 0x08
     f50:	89 85       	ldd	r24, Y+9	; 0x09
     f52:	9a 85       	ldd	r25, Y+10	; 0x0a
     f54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f58:	dc 01       	movw	r26, r24
     f5a:	cb 01       	movw	r24, r22
     f5c:	9e 83       	std	Y+6, r25	; 0x06
     f5e:	8d 83       	std	Y+5, r24	; 0x05
     f60:	8d 81       	ldd	r24, Y+5	; 0x05
     f62:	9e 81       	ldd	r25, Y+6	; 0x06
     f64:	9a 83       	std	Y+2, r25	; 0x02
     f66:	89 83       	std	Y+1, r24	; 0x01
     f68:	89 81       	ldd	r24, Y+1	; 0x01
     f6a:	9a 81       	ldd	r25, Y+2	; 0x02
     f6c:	01 97       	sbiw	r24, 0x01	; 1
     f6e:	f1 f7       	brne	.-4      	; 0xf6c <SimpleCalculator_getSecond_Number+0x1e8>
     f70:	9a 83       	std	Y+2, r25	; 0x02
     f72:	89 83       	std	Y+1, r24	; 0x01
	num1_flag=0;
}

void SimpleCalculator_getSecond_Number()
{
	while(num2_flag==0)
     f74:	80 91 73 00 	lds	r24, 0x0073
     f78:	88 23       	and	r24, r24
     f7a:	09 f4       	brne	.+2      	; 0xf7e <SimpleCalculator_getSecond_Number+0x1fa>
     f7c:	0e cf       	rjmp	.-484    	; 0xd9a <SimpleCalculator_getSecond_Number+0x16>
			num2=num2*10+ key;
			break;
		}
		_delay_ms(400);
	}
	num2_flag=0;
     f7e:	10 92 73 00 	sts	0x0073, r1

}
     f82:	60 96       	adiw	r28, 0x10	; 16
     f84:	0f b6       	in	r0, 0x3f	; 63
     f86:	f8 94       	cli
     f88:	de bf       	out	0x3e, r29	; 62
     f8a:	0f be       	out	0x3f, r0	; 63
     f8c:	cd bf       	out	0x3d, r28	; 61
     f8e:	cf 91       	pop	r28
     f90:	df 91       	pop	r29
     f92:	08 95       	ret

00000f94 <SimpleCalculator_printResult>:

void SimpleCalculator_printResult()
{
     f94:	df 93       	push	r29
     f96:	cf 93       	push	r28
     f98:	00 d0       	rcall	.+0      	; 0xf9a <SimpleCalculator_printResult+0x6>
     f9a:	cd b7       	in	r28, 0x3d	; 61
     f9c:	de b7       	in	r29, 0x3e	; 62

	switch(first_operand)
     f9e:	80 91 7a 00 	lds	r24, 0x007A
     fa2:	28 2f       	mov	r18, r24
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	3a 83       	std	Y+2, r19	; 0x02
     fa8:	29 83       	std	Y+1, r18	; 0x01
     faa:	49 81       	ldd	r20, Y+1	; 0x01
     fac:	5a 81       	ldd	r21, Y+2	; 0x02
     fae:	4b 32       	cpi	r20, 0x2B	; 43
     fb0:	51 05       	cpc	r21, r1
     fb2:	b9 f0       	breq	.+46     	; 0xfe2 <SimpleCalculator_printResult+0x4e>
     fb4:	89 81       	ldd	r24, Y+1	; 0x01
     fb6:	9a 81       	ldd	r25, Y+2	; 0x02
     fb8:	8c 32       	cpi	r24, 0x2C	; 44
     fba:	91 05       	cpc	r25, r1
     fbc:	34 f4       	brge	.+12     	; 0xfca <SimpleCalculator_printResult+0x36>
     fbe:	29 81       	ldd	r18, Y+1	; 0x01
     fc0:	3a 81       	ldd	r19, Y+2	; 0x02
     fc2:	2a 32       	cpi	r18, 0x2A	; 42
     fc4:	31 05       	cpc	r19, r1
     fc6:	c9 f1       	breq	.+114    	; 0x103a <SimpleCalculator_printResult+0xa6>
     fc8:	74 c0       	rjmp	.+232    	; 0x10b2 <SimpleCalculator_printResult+0x11e>
     fca:	49 81       	ldd	r20, Y+1	; 0x01
     fcc:	5a 81       	ldd	r21, Y+2	; 0x02
     fce:	4d 32       	cpi	r20, 0x2D	; 45
     fd0:	51 05       	cpc	r21, r1
     fd2:	e1 f0       	breq	.+56     	; 0x100c <SimpleCalculator_printResult+0x78>
     fd4:	89 81       	ldd	r24, Y+1	; 0x01
     fd6:	9a 81       	ldd	r25, Y+2	; 0x02
     fd8:	8f 32       	cpi	r24, 0x2F	; 47
     fda:	91 05       	cpc	r25, r1
     fdc:	09 f4       	brne	.+2      	; 0xfe0 <SimpleCalculator_printResult+0x4c>
     fde:	48 c0       	rjmp	.+144    	; 0x1070 <SimpleCalculator_printResult+0xdc>
     fe0:	68 c0       	rjmp	.+208    	; 0x10b2 <SimpleCalculator_printResult+0x11e>
	{
	case '+':
		result=num1+num2;
     fe2:	20 91 74 00 	lds	r18, 0x0074
     fe6:	30 91 75 00 	lds	r19, 0x0075
     fea:	80 91 76 00 	lds	r24, 0x0076
     fee:	90 91 77 00 	lds	r25, 0x0077
     ff2:	82 0f       	add	r24, r18
     ff4:	93 1f       	adc	r25, r19
     ff6:	90 93 79 00 	sts	0x0079, r25
     ffa:	80 93 78 00 	sts	0x0078, r24
		LCD_integerToString(result);
     ffe:	80 91 78 00 	lds	r24, 0x0078
    1002:	90 91 79 00 	lds	r25, 0x0079
    1006:	0e 94 66 12 	call	0x24cc	; 0x24cc <LCD_integerToString>
    100a:	53 c0       	rjmp	.+166    	; 0x10b2 <SimpleCalculator_printResult+0x11e>
		break;
	case '-':
		result=num1-num2;
    100c:	20 91 74 00 	lds	r18, 0x0074
    1010:	30 91 75 00 	lds	r19, 0x0075
    1014:	80 91 76 00 	lds	r24, 0x0076
    1018:	90 91 77 00 	lds	r25, 0x0077
    101c:	a9 01       	movw	r20, r18
    101e:	48 1b       	sub	r20, r24
    1020:	59 0b       	sbc	r21, r25
    1022:	ca 01       	movw	r24, r20
    1024:	90 93 79 00 	sts	0x0079, r25
    1028:	80 93 78 00 	sts	0x0078, r24
		LCD_integerToString(result);
    102c:	80 91 78 00 	lds	r24, 0x0078
    1030:	90 91 79 00 	lds	r25, 0x0079
    1034:	0e 94 66 12 	call	0x24cc	; 0x24cc <LCD_integerToString>
    1038:	3c c0       	rjmp	.+120    	; 0x10b2 <SimpleCalculator_printResult+0x11e>
		break;
	case '*':
		result=num1*num2;
    103a:	20 91 74 00 	lds	r18, 0x0074
    103e:	30 91 75 00 	lds	r19, 0x0075
    1042:	80 91 76 00 	lds	r24, 0x0076
    1046:	90 91 77 00 	lds	r25, 0x0077
    104a:	ac 01       	movw	r20, r24
    104c:	24 9f       	mul	r18, r20
    104e:	c0 01       	movw	r24, r0
    1050:	25 9f       	mul	r18, r21
    1052:	90 0d       	add	r25, r0
    1054:	34 9f       	mul	r19, r20
    1056:	90 0d       	add	r25, r0
    1058:	11 24       	eor	r1, r1
    105a:	90 93 79 00 	sts	0x0079, r25
    105e:	80 93 78 00 	sts	0x0078, r24
		LCD_integerToString(result);
    1062:	80 91 78 00 	lds	r24, 0x0078
    1066:	90 91 79 00 	lds	r25, 0x0079
    106a:	0e 94 66 12 	call	0x24cc	; 0x24cc <LCD_integerToString>
    106e:	21 c0       	rjmp	.+66     	; 0x10b2 <SimpleCalculator_printResult+0x11e>
		break;
	case '/':
		if(num2==0)
    1070:	80 91 76 00 	lds	r24, 0x0076
    1074:	90 91 77 00 	lds	r25, 0x0077
    1078:	00 97       	sbiw	r24, 0x00	; 0
    107a:	29 f4       	brne	.+10     	; 0x1086 <SimpleCalculator_printResult+0xf2>
			LCD_displayString("Undefined");
    107c:	80 e6       	ldi	r24, 0x60	; 96
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <LCD_displayString>
    1084:	16 c0       	rjmp	.+44     	; 0x10b2 <SimpleCalculator_printResult+0x11e>
		else
		{
			result=(uint16)((uint32)num1/num2);
    1086:	80 91 74 00 	lds	r24, 0x0074
    108a:	90 91 75 00 	lds	r25, 0x0075
    108e:	20 91 76 00 	lds	r18, 0x0076
    1092:	30 91 77 00 	lds	r19, 0x0077
    1096:	b9 01       	movw	r22, r18
    1098:	0e 94 93 12 	call	0x2526	; 0x2526 <__udivmodhi4>
    109c:	cb 01       	movw	r24, r22
    109e:	90 93 79 00 	sts	0x0079, r25
    10a2:	80 93 78 00 	sts	0x0078, r24
			LCD_integerToString(result);
    10a6:	80 91 78 00 	lds	r24, 0x0078
    10aa:	90 91 79 00 	lds	r25, 0x0079
    10ae:	0e 94 66 12 	call	0x24cc	; 0x24cc <LCD_integerToString>
		}
		break;
	}
}
    10b2:	0f 90       	pop	r0
    10b4:	0f 90       	pop	r0
    10b6:	cf 91       	pop	r28
    10b8:	df 91       	pop	r29
    10ba:	08 95       	ret

000010bc <main>:



int main(void)
{
    10bc:	df 93       	push	r29
    10be:	cf 93       	push	r28
    10c0:	cd b7       	in	r28, 0x3d	; 61
    10c2:	de b7       	in	r29, 0x3e	; 62
	/* LCD Initialization */
	LCD_init();
    10c4:	0e 94 46 11 	call	0x228c	; 0x228c <LCD_init>

	while(1)
	{
		SimpleCalculator_getFirst_Number();
    10c8:	0e 94 a3 05 	call	0xb46	; 0xb46 <SimpleCalculator_getFirst_Number>

		SimpleCalculator_getSecond_Number();
    10cc:	0e 94 c2 06 	call	0xd84	; 0xd84 <SimpleCalculator_getSecond_Number>
    10d0:	fb cf       	rjmp	.-10     	; 0x10c8 <main+0xc>

000010d2 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    10d2:	df 93       	push	r29
    10d4:	cf 93       	push	r28
    10d6:	cd b7       	in	r28, 0x3d	; 61
    10d8:	de b7       	in	r29, 0x3e	; 62
    10da:	27 97       	sbiw	r28, 0x07	; 7
    10dc:	0f b6       	in	r0, 0x3f	; 63
    10de:	f8 94       	cli
    10e0:	de bf       	out	0x3e, r29	; 62
    10e2:	0f be       	out	0x3f, r0	; 63
    10e4:	cd bf       	out	0x3d, r28	; 61
    10e6:	89 83       	std	Y+1, r24	; 0x01
    10e8:	6a 83       	std	Y+2, r22	; 0x02
    10ea:	4b 83       	std	Y+3, r20	; 0x03
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */

	if((pin_num > NUM_OF_PINS_PER_PORT) | (port_num > NUM_OF_PORTS ))
    10ec:	1f 82       	std	Y+7, r1	; 0x07
    10ee:	8a 81       	ldd	r24, Y+2	; 0x02
    10f0:	89 30       	cpi	r24, 0x09	; 9
    10f2:	10 f0       	brcs	.+4      	; 0x10f8 <GPIO_setupPinDirection+0x26>
    10f4:	21 e0       	ldi	r18, 0x01	; 1
    10f6:	2f 83       	std	Y+7, r18	; 0x07
    10f8:	1e 82       	std	Y+6, r1	; 0x06
    10fa:	89 81       	ldd	r24, Y+1	; 0x01
    10fc:	85 30       	cpi	r24, 0x05	; 5
    10fe:	10 f0       	brcs	.+4      	; 0x1104 <GPIO_setupPinDirection+0x32>
    1100:	31 e0       	ldi	r19, 0x01	; 1
    1102:	3e 83       	std	Y+6, r19	; 0x06
    1104:	8f 81       	ldd	r24, Y+7	; 0x07
    1106:	9e 81       	ldd	r25, Y+6	; 0x06
    1108:	89 2b       	or	r24, r25
    110a:	91 e0       	ldi	r25, 0x01	; 1
    110c:	89 27       	eor	r24, r25
    110e:	88 23       	and	r24, r24
    1110:	09 f4       	brne	.+2      	; 0x1114 <GPIO_setupPinDirection+0x42>
    1112:	d1 c0       	rjmp	.+418    	; 0x12b6 <GPIO_setupPinDirection+0x1e4>
	}

	else
	{
		/* setup the pin direction */
		switch(port_num)
    1114:	89 81       	ldd	r24, Y+1	; 0x01
    1116:	28 2f       	mov	r18, r24
    1118:	30 e0       	ldi	r19, 0x00	; 0
    111a:	3d 83       	std	Y+5, r19	; 0x05
    111c:	2c 83       	std	Y+4, r18	; 0x04
    111e:	8c 81       	ldd	r24, Y+4	; 0x04
    1120:	9d 81       	ldd	r25, Y+5	; 0x05
    1122:	81 30       	cpi	r24, 0x01	; 1
    1124:	91 05       	cpc	r25, r1
    1126:	09 f4       	brne	.+2      	; 0x112a <GPIO_setupPinDirection+0x58>
    1128:	43 c0       	rjmp	.+134    	; 0x11b0 <GPIO_setupPinDirection+0xde>
    112a:	2c 81       	ldd	r18, Y+4	; 0x04
    112c:	3d 81       	ldd	r19, Y+5	; 0x05
    112e:	22 30       	cpi	r18, 0x02	; 2
    1130:	31 05       	cpc	r19, r1
    1132:	2c f4       	brge	.+10     	; 0x113e <GPIO_setupPinDirection+0x6c>
    1134:	8c 81       	ldd	r24, Y+4	; 0x04
    1136:	9d 81       	ldd	r25, Y+5	; 0x05
    1138:	00 97       	sbiw	r24, 0x00	; 0
    113a:	71 f0       	breq	.+28     	; 0x1158 <GPIO_setupPinDirection+0x86>
    113c:	bc c0       	rjmp	.+376    	; 0x12b6 <GPIO_setupPinDirection+0x1e4>
    113e:	2c 81       	ldd	r18, Y+4	; 0x04
    1140:	3d 81       	ldd	r19, Y+5	; 0x05
    1142:	22 30       	cpi	r18, 0x02	; 2
    1144:	31 05       	cpc	r19, r1
    1146:	09 f4       	brne	.+2      	; 0x114a <GPIO_setupPinDirection+0x78>
    1148:	5f c0       	rjmp	.+190    	; 0x1208 <GPIO_setupPinDirection+0x136>
    114a:	8c 81       	ldd	r24, Y+4	; 0x04
    114c:	9d 81       	ldd	r25, Y+5	; 0x05
    114e:	83 30       	cpi	r24, 0x03	; 3
    1150:	91 05       	cpc	r25, r1
    1152:	09 f4       	brne	.+2      	; 0x1156 <GPIO_setupPinDirection+0x84>
    1154:	85 c0       	rjmp	.+266    	; 0x1260 <GPIO_setupPinDirection+0x18e>
    1156:	af c0       	rjmp	.+350    	; 0x12b6 <GPIO_setupPinDirection+0x1e4>
		{
		case PORTA_ID:
			if(direction==PIN_INPUT)
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	88 23       	and	r24, r24
    115c:	a9 f4       	brne	.+42     	; 0x1188 <GPIO_setupPinDirection+0xb6>
			{
				CLEAR_BIT(DDRA,pin_num);
    115e:	aa e3       	ldi	r26, 0x3A	; 58
    1160:	b0 e0       	ldi	r27, 0x00	; 0
    1162:	ea e3       	ldi	r30, 0x3A	; 58
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	80 81       	ld	r24, Z
    1168:	48 2f       	mov	r20, r24
    116a:	8a 81       	ldd	r24, Y+2	; 0x02
    116c:	28 2f       	mov	r18, r24
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	02 2e       	mov	r0, r18
    1176:	02 c0       	rjmp	.+4      	; 0x117c <GPIO_setupPinDirection+0xaa>
    1178:	88 0f       	add	r24, r24
    117a:	99 1f       	adc	r25, r25
    117c:	0a 94       	dec	r0
    117e:	e2 f7       	brpl	.-8      	; 0x1178 <GPIO_setupPinDirection+0xa6>
    1180:	80 95       	com	r24
    1182:	84 23       	and	r24, r20
    1184:	8c 93       	st	X, r24
    1186:	97 c0       	rjmp	.+302    	; 0x12b6 <GPIO_setupPinDirection+0x1e4>
			}
			else
			{
				SET_BIT(DDRA,pin_num);
    1188:	aa e3       	ldi	r26, 0x3A	; 58
    118a:	b0 e0       	ldi	r27, 0x00	; 0
    118c:	ea e3       	ldi	r30, 0x3A	; 58
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	48 2f       	mov	r20, r24
    1194:	8a 81       	ldd	r24, Y+2	; 0x02
    1196:	28 2f       	mov	r18, r24
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	81 e0       	ldi	r24, 0x01	; 1
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	02 2e       	mov	r0, r18
    11a0:	02 c0       	rjmp	.+4      	; 0x11a6 <GPIO_setupPinDirection+0xd4>
    11a2:	88 0f       	add	r24, r24
    11a4:	99 1f       	adc	r25, r25
    11a6:	0a 94       	dec	r0
    11a8:	e2 f7       	brpl	.-8      	; 0x11a2 <GPIO_setupPinDirection+0xd0>
    11aa:	84 2b       	or	r24, r20
    11ac:	8c 93       	st	X, r24
    11ae:	83 c0       	rjmp	.+262    	; 0x12b6 <GPIO_setupPinDirection+0x1e4>
			}
			break;

		case PORTB_ID:
			if(direction==PIN_INPUT)
    11b0:	8b 81       	ldd	r24, Y+3	; 0x03
    11b2:	88 23       	and	r24, r24
    11b4:	a9 f4       	brne	.+42     	; 0x11e0 <GPIO_setupPinDirection+0x10e>
			{
				CLEAR_BIT(DDRB,pin_num);
    11b6:	a7 e3       	ldi	r26, 0x37	; 55
    11b8:	b0 e0       	ldi	r27, 0x00	; 0
    11ba:	e7 e3       	ldi	r30, 0x37	; 55
    11bc:	f0 e0       	ldi	r31, 0x00	; 0
    11be:	80 81       	ld	r24, Z
    11c0:	48 2f       	mov	r20, r24
    11c2:	8a 81       	ldd	r24, Y+2	; 0x02
    11c4:	28 2f       	mov	r18, r24
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	81 e0       	ldi	r24, 0x01	; 1
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	02 2e       	mov	r0, r18
    11ce:	02 c0       	rjmp	.+4      	; 0x11d4 <GPIO_setupPinDirection+0x102>
    11d0:	88 0f       	add	r24, r24
    11d2:	99 1f       	adc	r25, r25
    11d4:	0a 94       	dec	r0
    11d6:	e2 f7       	brpl	.-8      	; 0x11d0 <GPIO_setupPinDirection+0xfe>
    11d8:	80 95       	com	r24
    11da:	84 23       	and	r24, r20
    11dc:	8c 93       	st	X, r24
    11de:	6b c0       	rjmp	.+214    	; 0x12b6 <GPIO_setupPinDirection+0x1e4>
			}
			else
			{
				SET_BIT(DDRB,pin_num);
    11e0:	a7 e3       	ldi	r26, 0x37	; 55
    11e2:	b0 e0       	ldi	r27, 0x00	; 0
    11e4:	e7 e3       	ldi	r30, 0x37	; 55
    11e6:	f0 e0       	ldi	r31, 0x00	; 0
    11e8:	80 81       	ld	r24, Z
    11ea:	48 2f       	mov	r20, r24
    11ec:	8a 81       	ldd	r24, Y+2	; 0x02
    11ee:	28 2f       	mov	r18, r24
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	02 2e       	mov	r0, r18
    11f8:	02 c0       	rjmp	.+4      	; 0x11fe <GPIO_setupPinDirection+0x12c>
    11fa:	88 0f       	add	r24, r24
    11fc:	99 1f       	adc	r25, r25
    11fe:	0a 94       	dec	r0
    1200:	e2 f7       	brpl	.-8      	; 0x11fa <GPIO_setupPinDirection+0x128>
    1202:	84 2b       	or	r24, r20
    1204:	8c 93       	st	X, r24
    1206:	57 c0       	rjmp	.+174    	; 0x12b6 <GPIO_setupPinDirection+0x1e4>
			}
			break;

		case PORTC_ID:
			if(direction==PIN_INPUT)
    1208:	8b 81       	ldd	r24, Y+3	; 0x03
    120a:	88 23       	and	r24, r24
    120c:	a9 f4       	brne	.+42     	; 0x1238 <GPIO_setupPinDirection+0x166>
			{
				CLEAR_BIT(DDRC,pin_num);
    120e:	a4 e3       	ldi	r26, 0x34	; 52
    1210:	b0 e0       	ldi	r27, 0x00	; 0
    1212:	e4 e3       	ldi	r30, 0x34	; 52
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	80 81       	ld	r24, Z
    1218:	48 2f       	mov	r20, r24
    121a:	8a 81       	ldd	r24, Y+2	; 0x02
    121c:	28 2f       	mov	r18, r24
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	81 e0       	ldi	r24, 0x01	; 1
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	02 2e       	mov	r0, r18
    1226:	02 c0       	rjmp	.+4      	; 0x122c <GPIO_setupPinDirection+0x15a>
    1228:	88 0f       	add	r24, r24
    122a:	99 1f       	adc	r25, r25
    122c:	0a 94       	dec	r0
    122e:	e2 f7       	brpl	.-8      	; 0x1228 <GPIO_setupPinDirection+0x156>
    1230:	80 95       	com	r24
    1232:	84 23       	and	r24, r20
    1234:	8c 93       	st	X, r24
    1236:	3f c0       	rjmp	.+126    	; 0x12b6 <GPIO_setupPinDirection+0x1e4>
			}
			else
			{
				SET_BIT(DDRC,pin_num);
    1238:	a4 e3       	ldi	r26, 0x34	; 52
    123a:	b0 e0       	ldi	r27, 0x00	; 0
    123c:	e4 e3       	ldi	r30, 0x34	; 52
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	80 81       	ld	r24, Z
    1242:	48 2f       	mov	r20, r24
    1244:	8a 81       	ldd	r24, Y+2	; 0x02
    1246:	28 2f       	mov	r18, r24
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	02 2e       	mov	r0, r18
    1250:	02 c0       	rjmp	.+4      	; 0x1256 <GPIO_setupPinDirection+0x184>
    1252:	88 0f       	add	r24, r24
    1254:	99 1f       	adc	r25, r25
    1256:	0a 94       	dec	r0
    1258:	e2 f7       	brpl	.-8      	; 0x1252 <GPIO_setupPinDirection+0x180>
    125a:	84 2b       	or	r24, r20
    125c:	8c 93       	st	X, r24
    125e:	2b c0       	rjmp	.+86     	; 0x12b6 <GPIO_setupPinDirection+0x1e4>
			}
			break;

		case PORTD_ID:
			if(direction==PIN_INPUT)
    1260:	8b 81       	ldd	r24, Y+3	; 0x03
    1262:	88 23       	and	r24, r24
    1264:	a9 f4       	brne	.+42     	; 0x1290 <GPIO_setupPinDirection+0x1be>
			{
				CLEAR_BIT(DDRD,pin_num);
    1266:	a1 e3       	ldi	r26, 0x31	; 49
    1268:	b0 e0       	ldi	r27, 0x00	; 0
    126a:	e1 e3       	ldi	r30, 0x31	; 49
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	80 81       	ld	r24, Z
    1270:	48 2f       	mov	r20, r24
    1272:	8a 81       	ldd	r24, Y+2	; 0x02
    1274:	28 2f       	mov	r18, r24
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	81 e0       	ldi	r24, 0x01	; 1
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	02 2e       	mov	r0, r18
    127e:	02 c0       	rjmp	.+4      	; 0x1284 <GPIO_setupPinDirection+0x1b2>
    1280:	88 0f       	add	r24, r24
    1282:	99 1f       	adc	r25, r25
    1284:	0a 94       	dec	r0
    1286:	e2 f7       	brpl	.-8      	; 0x1280 <GPIO_setupPinDirection+0x1ae>
    1288:	80 95       	com	r24
    128a:	84 23       	and	r24, r20
    128c:	8c 93       	st	X, r24
    128e:	13 c0       	rjmp	.+38     	; 0x12b6 <GPIO_setupPinDirection+0x1e4>
			}
			else
			{
				SET_BIT(DDRD,pin_num);
    1290:	a1 e3       	ldi	r26, 0x31	; 49
    1292:	b0 e0       	ldi	r27, 0x00	; 0
    1294:	e1 e3       	ldi	r30, 0x31	; 49
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	80 81       	ld	r24, Z
    129a:	48 2f       	mov	r20, r24
    129c:	8a 81       	ldd	r24, Y+2	; 0x02
    129e:	28 2f       	mov	r18, r24
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	02 2e       	mov	r0, r18
    12a8:	02 c0       	rjmp	.+4      	; 0x12ae <GPIO_setupPinDirection+0x1dc>
    12aa:	88 0f       	add	r24, r24
    12ac:	99 1f       	adc	r25, r25
    12ae:	0a 94       	dec	r0
    12b0:	e2 f7       	brpl	.-8      	; 0x12aa <GPIO_setupPinDirection+0x1d8>
    12b2:	84 2b       	or	r24, r20
    12b4:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    12b6:	27 96       	adiw	r28, 0x07	; 7
    12b8:	0f b6       	in	r0, 0x3f	; 63
    12ba:	f8 94       	cli
    12bc:	de bf       	out	0x3e, r29	; 62
    12be:	0f be       	out	0x3f, r0	; 63
    12c0:	cd bf       	out	0x3d, r28	; 61
    12c2:	cf 91       	pop	r28
    12c4:	df 91       	pop	r29
    12c6:	08 95       	ret

000012c8 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    12c8:	df 93       	push	r29
    12ca:	cf 93       	push	r28
    12cc:	cd b7       	in	r28, 0x3d	; 61
    12ce:	de b7       	in	r29, 0x3e	; 62
    12d0:	27 97       	sbiw	r28, 0x07	; 7
    12d2:	0f b6       	in	r0, 0x3f	; 63
    12d4:	f8 94       	cli
    12d6:	de bf       	out	0x3e, r29	; 62
    12d8:	0f be       	out	0x3f, r0	; 63
    12da:	cd bf       	out	0x3d, r28	; 61
    12dc:	89 83       	std	Y+1, r24	; 0x01
    12de:	6a 83       	std	Y+2, r22	; 0x02
    12e0:	4b 83       	std	Y+3, r20	; 0x03

	if((port_num > NUM_OF_PORTS ) | (pin_num > NUM_OF_PINS_PER_PORT))
    12e2:	1f 82       	std	Y+7, r1	; 0x07
    12e4:	89 81       	ldd	r24, Y+1	; 0x01
    12e6:	85 30       	cpi	r24, 0x05	; 5
    12e8:	10 f0       	brcs	.+4      	; 0x12ee <GPIO_writePin+0x26>
    12ea:	21 e0       	ldi	r18, 0x01	; 1
    12ec:	2f 83       	std	Y+7, r18	; 0x07
    12ee:	1e 82       	std	Y+6, r1	; 0x06
    12f0:	8a 81       	ldd	r24, Y+2	; 0x02
    12f2:	89 30       	cpi	r24, 0x09	; 9
    12f4:	10 f0       	brcs	.+4      	; 0x12fa <GPIO_writePin+0x32>
    12f6:	31 e0       	ldi	r19, 0x01	; 1
    12f8:	3e 83       	std	Y+6, r19	; 0x06
    12fa:	8f 81       	ldd	r24, Y+7	; 0x07
    12fc:	9e 81       	ldd	r25, Y+6	; 0x06
    12fe:	89 2b       	or	r24, r25
    1300:	91 e0       	ldi	r25, 0x01	; 1
    1302:	89 27       	eor	r24, r25
    1304:	88 23       	and	r24, r24
    1306:	09 f4       	brne	.+2      	; 0x130a <GPIO_writePin+0x42>
    1308:	d1 c0       	rjmp	.+418    	; 0x14ac <GPIO_writePin+0x1e4>
		/* Do Nothing*/
	}

	else
	{
		switch(port_num)
    130a:	89 81       	ldd	r24, Y+1	; 0x01
    130c:	28 2f       	mov	r18, r24
    130e:	30 e0       	ldi	r19, 0x00	; 0
    1310:	3d 83       	std	Y+5, r19	; 0x05
    1312:	2c 83       	std	Y+4, r18	; 0x04
    1314:	8c 81       	ldd	r24, Y+4	; 0x04
    1316:	9d 81       	ldd	r25, Y+5	; 0x05
    1318:	81 30       	cpi	r24, 0x01	; 1
    131a:	91 05       	cpc	r25, r1
    131c:	09 f4       	brne	.+2      	; 0x1320 <GPIO_writePin+0x58>
    131e:	43 c0       	rjmp	.+134    	; 0x13a6 <GPIO_writePin+0xde>
    1320:	2c 81       	ldd	r18, Y+4	; 0x04
    1322:	3d 81       	ldd	r19, Y+5	; 0x05
    1324:	22 30       	cpi	r18, 0x02	; 2
    1326:	31 05       	cpc	r19, r1
    1328:	2c f4       	brge	.+10     	; 0x1334 <GPIO_writePin+0x6c>
    132a:	8c 81       	ldd	r24, Y+4	; 0x04
    132c:	9d 81       	ldd	r25, Y+5	; 0x05
    132e:	00 97       	sbiw	r24, 0x00	; 0
    1330:	71 f0       	breq	.+28     	; 0x134e <GPIO_writePin+0x86>
    1332:	bc c0       	rjmp	.+376    	; 0x14ac <GPIO_writePin+0x1e4>
    1334:	2c 81       	ldd	r18, Y+4	; 0x04
    1336:	3d 81       	ldd	r19, Y+5	; 0x05
    1338:	22 30       	cpi	r18, 0x02	; 2
    133a:	31 05       	cpc	r19, r1
    133c:	09 f4       	brne	.+2      	; 0x1340 <GPIO_writePin+0x78>
    133e:	5f c0       	rjmp	.+190    	; 0x13fe <GPIO_writePin+0x136>
    1340:	8c 81       	ldd	r24, Y+4	; 0x04
    1342:	9d 81       	ldd	r25, Y+5	; 0x05
    1344:	83 30       	cpi	r24, 0x03	; 3
    1346:	91 05       	cpc	r25, r1
    1348:	09 f4       	brne	.+2      	; 0x134c <GPIO_writePin+0x84>
    134a:	85 c0       	rjmp	.+266    	; 0x1456 <GPIO_writePin+0x18e>
    134c:	af c0       	rjmp	.+350    	; 0x14ac <GPIO_writePin+0x1e4>
		{
		case PORTA_ID:
			if(value==LOGIC_HIGH)
    134e:	8b 81       	ldd	r24, Y+3	; 0x03
    1350:	81 30       	cpi	r24, 0x01	; 1
    1352:	a1 f4       	brne	.+40     	; 0x137c <GPIO_writePin+0xb4>
			{
				SET_BIT(PORTA,pin_num);
    1354:	ab e3       	ldi	r26, 0x3B	; 59
    1356:	b0 e0       	ldi	r27, 0x00	; 0
    1358:	eb e3       	ldi	r30, 0x3B	; 59
    135a:	f0 e0       	ldi	r31, 0x00	; 0
    135c:	80 81       	ld	r24, Z
    135e:	48 2f       	mov	r20, r24
    1360:	8a 81       	ldd	r24, Y+2	; 0x02
    1362:	28 2f       	mov	r18, r24
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	81 e0       	ldi	r24, 0x01	; 1
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	02 2e       	mov	r0, r18
    136c:	02 c0       	rjmp	.+4      	; 0x1372 <GPIO_writePin+0xaa>
    136e:	88 0f       	add	r24, r24
    1370:	99 1f       	adc	r25, r25
    1372:	0a 94       	dec	r0
    1374:	e2 f7       	brpl	.-8      	; 0x136e <GPIO_writePin+0xa6>
    1376:	84 2b       	or	r24, r20
    1378:	8c 93       	st	X, r24
    137a:	98 c0       	rjmp	.+304    	; 0x14ac <GPIO_writePin+0x1e4>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    137c:	ab e3       	ldi	r26, 0x3B	; 59
    137e:	b0 e0       	ldi	r27, 0x00	; 0
    1380:	eb e3       	ldi	r30, 0x3B	; 59
    1382:	f0 e0       	ldi	r31, 0x00	; 0
    1384:	80 81       	ld	r24, Z
    1386:	48 2f       	mov	r20, r24
    1388:	8a 81       	ldd	r24, Y+2	; 0x02
    138a:	28 2f       	mov	r18, r24
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	81 e0       	ldi	r24, 0x01	; 1
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	02 2e       	mov	r0, r18
    1394:	02 c0       	rjmp	.+4      	; 0x139a <GPIO_writePin+0xd2>
    1396:	88 0f       	add	r24, r24
    1398:	99 1f       	adc	r25, r25
    139a:	0a 94       	dec	r0
    139c:	e2 f7       	brpl	.-8      	; 0x1396 <GPIO_writePin+0xce>
    139e:	80 95       	com	r24
    13a0:	84 23       	and	r24, r20
    13a2:	8c 93       	st	X, r24
    13a4:	83 c0       	rjmp	.+262    	; 0x14ac <GPIO_writePin+0x1e4>
			}
			break;

		case PORTB_ID:
			if(value==LOGIC_HIGH)
    13a6:	8b 81       	ldd	r24, Y+3	; 0x03
    13a8:	81 30       	cpi	r24, 0x01	; 1
    13aa:	a1 f4       	brne	.+40     	; 0x13d4 <GPIO_writePin+0x10c>
			{
				SET_BIT(PORTB,pin_num);
    13ac:	a8 e3       	ldi	r26, 0x38	; 56
    13ae:	b0 e0       	ldi	r27, 0x00	; 0
    13b0:	e8 e3       	ldi	r30, 0x38	; 56
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	80 81       	ld	r24, Z
    13b6:	48 2f       	mov	r20, r24
    13b8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ba:	28 2f       	mov	r18, r24
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	81 e0       	ldi	r24, 0x01	; 1
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	02 2e       	mov	r0, r18
    13c4:	02 c0       	rjmp	.+4      	; 0x13ca <GPIO_writePin+0x102>
    13c6:	88 0f       	add	r24, r24
    13c8:	99 1f       	adc	r25, r25
    13ca:	0a 94       	dec	r0
    13cc:	e2 f7       	brpl	.-8      	; 0x13c6 <GPIO_writePin+0xfe>
    13ce:	84 2b       	or	r24, r20
    13d0:	8c 93       	st	X, r24
    13d2:	6c c0       	rjmp	.+216    	; 0x14ac <GPIO_writePin+0x1e4>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    13d4:	a8 e3       	ldi	r26, 0x38	; 56
    13d6:	b0 e0       	ldi	r27, 0x00	; 0
    13d8:	e8 e3       	ldi	r30, 0x38	; 56
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	80 81       	ld	r24, Z
    13de:	48 2f       	mov	r20, r24
    13e0:	8a 81       	ldd	r24, Y+2	; 0x02
    13e2:	28 2f       	mov	r18, r24
    13e4:	30 e0       	ldi	r19, 0x00	; 0
    13e6:	81 e0       	ldi	r24, 0x01	; 1
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	02 2e       	mov	r0, r18
    13ec:	02 c0       	rjmp	.+4      	; 0x13f2 <GPIO_writePin+0x12a>
    13ee:	88 0f       	add	r24, r24
    13f0:	99 1f       	adc	r25, r25
    13f2:	0a 94       	dec	r0
    13f4:	e2 f7       	brpl	.-8      	; 0x13ee <GPIO_writePin+0x126>
    13f6:	80 95       	com	r24
    13f8:	84 23       	and	r24, r20
    13fa:	8c 93       	st	X, r24
    13fc:	57 c0       	rjmp	.+174    	; 0x14ac <GPIO_writePin+0x1e4>
			}
			break;

		case PORTC_ID:
			if(value==LOGIC_HIGH)
    13fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1400:	81 30       	cpi	r24, 0x01	; 1
    1402:	a1 f4       	brne	.+40     	; 0x142c <GPIO_writePin+0x164>
			{
				SET_BIT(PORTC,pin_num);
    1404:	a5 e3       	ldi	r26, 0x35	; 53
    1406:	b0 e0       	ldi	r27, 0x00	; 0
    1408:	e5 e3       	ldi	r30, 0x35	; 53
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	80 81       	ld	r24, Z
    140e:	48 2f       	mov	r20, r24
    1410:	8a 81       	ldd	r24, Y+2	; 0x02
    1412:	28 2f       	mov	r18, r24
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	81 e0       	ldi	r24, 0x01	; 1
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	02 2e       	mov	r0, r18
    141c:	02 c0       	rjmp	.+4      	; 0x1422 <GPIO_writePin+0x15a>
    141e:	88 0f       	add	r24, r24
    1420:	99 1f       	adc	r25, r25
    1422:	0a 94       	dec	r0
    1424:	e2 f7       	brpl	.-8      	; 0x141e <GPIO_writePin+0x156>
    1426:	84 2b       	or	r24, r20
    1428:	8c 93       	st	X, r24
    142a:	40 c0       	rjmp	.+128    	; 0x14ac <GPIO_writePin+0x1e4>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    142c:	a5 e3       	ldi	r26, 0x35	; 53
    142e:	b0 e0       	ldi	r27, 0x00	; 0
    1430:	e5 e3       	ldi	r30, 0x35	; 53
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	80 81       	ld	r24, Z
    1436:	48 2f       	mov	r20, r24
    1438:	8a 81       	ldd	r24, Y+2	; 0x02
    143a:	28 2f       	mov	r18, r24
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	81 e0       	ldi	r24, 0x01	; 1
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	02 2e       	mov	r0, r18
    1444:	02 c0       	rjmp	.+4      	; 0x144a <GPIO_writePin+0x182>
    1446:	88 0f       	add	r24, r24
    1448:	99 1f       	adc	r25, r25
    144a:	0a 94       	dec	r0
    144c:	e2 f7       	brpl	.-8      	; 0x1446 <GPIO_writePin+0x17e>
    144e:	80 95       	com	r24
    1450:	84 23       	and	r24, r20
    1452:	8c 93       	st	X, r24
    1454:	2b c0       	rjmp	.+86     	; 0x14ac <GPIO_writePin+0x1e4>
			}
			break;

		case PORTD_ID:
			if(value==LOGIC_HIGH)
    1456:	8b 81       	ldd	r24, Y+3	; 0x03
    1458:	81 30       	cpi	r24, 0x01	; 1
    145a:	a1 f4       	brne	.+40     	; 0x1484 <GPIO_writePin+0x1bc>
			{
				SET_BIT(PORTD,pin_num);
    145c:	a2 e3       	ldi	r26, 0x32	; 50
    145e:	b0 e0       	ldi	r27, 0x00	; 0
    1460:	e2 e3       	ldi	r30, 0x32	; 50
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	80 81       	ld	r24, Z
    1466:	48 2f       	mov	r20, r24
    1468:	8a 81       	ldd	r24, Y+2	; 0x02
    146a:	28 2f       	mov	r18, r24
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	81 e0       	ldi	r24, 0x01	; 1
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	02 2e       	mov	r0, r18
    1474:	02 c0       	rjmp	.+4      	; 0x147a <GPIO_writePin+0x1b2>
    1476:	88 0f       	add	r24, r24
    1478:	99 1f       	adc	r25, r25
    147a:	0a 94       	dec	r0
    147c:	e2 f7       	brpl	.-8      	; 0x1476 <GPIO_writePin+0x1ae>
    147e:	84 2b       	or	r24, r20
    1480:	8c 93       	st	X, r24
    1482:	14 c0       	rjmp	.+40     	; 0x14ac <GPIO_writePin+0x1e4>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1484:	a2 e3       	ldi	r26, 0x32	; 50
    1486:	b0 e0       	ldi	r27, 0x00	; 0
    1488:	e2 e3       	ldi	r30, 0x32	; 50
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	80 81       	ld	r24, Z
    148e:	48 2f       	mov	r20, r24
    1490:	8a 81       	ldd	r24, Y+2	; 0x02
    1492:	28 2f       	mov	r18, r24
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	81 e0       	ldi	r24, 0x01	; 1
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	02 2e       	mov	r0, r18
    149c:	02 c0       	rjmp	.+4      	; 0x14a2 <GPIO_writePin+0x1da>
    149e:	88 0f       	add	r24, r24
    14a0:	99 1f       	adc	r25, r25
    14a2:	0a 94       	dec	r0
    14a4:	e2 f7       	brpl	.-8      	; 0x149e <GPIO_writePin+0x1d6>
    14a6:	80 95       	com	r24
    14a8:	84 23       	and	r24, r20
    14aa:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    14ac:	27 96       	adiw	r28, 0x07	; 7
    14ae:	0f b6       	in	r0, 0x3f	; 63
    14b0:	f8 94       	cli
    14b2:	de bf       	out	0x3e, r29	; 62
    14b4:	0f be       	out	0x3f, r0	; 63
    14b6:	cd bf       	out	0x3d, r28	; 61
    14b8:	cf 91       	pop	r28
    14ba:	df 91       	pop	r29
    14bc:	08 95       	ret

000014be <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    14be:	df 93       	push	r29
    14c0:	cf 93       	push	r28
    14c2:	cd b7       	in	r28, 0x3d	; 61
    14c4:	de b7       	in	r29, 0x3e	; 62
    14c6:	27 97       	sbiw	r28, 0x07	; 7
    14c8:	0f b6       	in	r0, 0x3f	; 63
    14ca:	f8 94       	cli
    14cc:	de bf       	out	0x3e, r29	; 62
    14ce:	0f be       	out	0x3f, r0	; 63
    14d0:	cd bf       	out	0x3d, r28	; 61
    14d2:	8a 83       	std	Y+2, r24	; 0x02
    14d4:	6b 83       	std	Y+3, r22	; 0x03
	uint8 value= LOGIC_LOW;
    14d6:	19 82       	std	Y+1, r1	; 0x01

	if((port_num > NUM_OF_PORTS ) | (pin_num > NUM_OF_PINS_PER_PORT))
    14d8:	1f 82       	std	Y+7, r1	; 0x07
    14da:	8a 81       	ldd	r24, Y+2	; 0x02
    14dc:	85 30       	cpi	r24, 0x05	; 5
    14de:	10 f0       	brcs	.+4      	; 0x14e4 <GPIO_readPin+0x26>
    14e0:	21 e0       	ldi	r18, 0x01	; 1
    14e2:	2f 83       	std	Y+7, r18	; 0x07
    14e4:	1e 82       	std	Y+6, r1	; 0x06
    14e6:	8b 81       	ldd	r24, Y+3	; 0x03
    14e8:	89 30       	cpi	r24, 0x09	; 9
    14ea:	10 f0       	brcs	.+4      	; 0x14f0 <GPIO_readPin+0x32>
    14ec:	31 e0       	ldi	r19, 0x01	; 1
    14ee:	3e 83       	std	Y+6, r19	; 0x06
    14f0:	8f 81       	ldd	r24, Y+7	; 0x07
    14f2:	4e 81       	ldd	r20, Y+6	; 0x06
    14f4:	84 2b       	or	r24, r20
    14f6:	91 e0       	ldi	r25, 0x01	; 1
    14f8:	89 27       	eor	r24, r25
    14fa:	88 23       	and	r24, r24
    14fc:	09 f4       	brne	.+2      	; 0x1500 <GPIO_readPin+0x42>
    14fe:	80 c0       	rjmp	.+256    	; 0x1600 <GPIO_readPin+0x142>
	{
		/* DO Nothing */
	}
	else
	{
		switch(port_num)
    1500:	8a 81       	ldd	r24, Y+2	; 0x02
    1502:	28 2f       	mov	r18, r24
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	3d 83       	std	Y+5, r19	; 0x05
    1508:	2c 83       	std	Y+4, r18	; 0x04
    150a:	4c 81       	ldd	r20, Y+4	; 0x04
    150c:	5d 81       	ldd	r21, Y+5	; 0x05
    150e:	41 30       	cpi	r20, 0x01	; 1
    1510:	51 05       	cpc	r21, r1
    1512:	79 f1       	breq	.+94     	; 0x1572 <GPIO_readPin+0xb4>
    1514:	8c 81       	ldd	r24, Y+4	; 0x04
    1516:	9d 81       	ldd	r25, Y+5	; 0x05
    1518:	82 30       	cpi	r24, 0x02	; 2
    151a:	91 05       	cpc	r25, r1
    151c:	34 f4       	brge	.+12     	; 0x152a <GPIO_readPin+0x6c>
    151e:	2c 81       	ldd	r18, Y+4	; 0x04
    1520:	3d 81       	ldd	r19, Y+5	; 0x05
    1522:	21 15       	cp	r18, r1
    1524:	31 05       	cpc	r19, r1
    1526:	69 f0       	breq	.+26     	; 0x1542 <GPIO_readPin+0x84>
    1528:	6b c0       	rjmp	.+214    	; 0x1600 <GPIO_readPin+0x142>
    152a:	4c 81       	ldd	r20, Y+4	; 0x04
    152c:	5d 81       	ldd	r21, Y+5	; 0x05
    152e:	42 30       	cpi	r20, 0x02	; 2
    1530:	51 05       	cpc	r21, r1
    1532:	b9 f1       	breq	.+110    	; 0x15a2 <GPIO_readPin+0xe4>
    1534:	8c 81       	ldd	r24, Y+4	; 0x04
    1536:	9d 81       	ldd	r25, Y+5	; 0x05
    1538:	83 30       	cpi	r24, 0x03	; 3
    153a:	91 05       	cpc	r25, r1
    153c:	09 f4       	brne	.+2      	; 0x1540 <GPIO_readPin+0x82>
    153e:	49 c0       	rjmp	.+146    	; 0x15d2 <GPIO_readPin+0x114>
    1540:	5f c0       	rjmp	.+190    	; 0x1600 <GPIO_readPin+0x142>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1542:	e9 e3       	ldi	r30, 0x39	; 57
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	80 81       	ld	r24, Z
    1548:	28 2f       	mov	r18, r24
    154a:	30 e0       	ldi	r19, 0x00	; 0
    154c:	8b 81       	ldd	r24, Y+3	; 0x03
    154e:	88 2f       	mov	r24, r24
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	a9 01       	movw	r20, r18
    1554:	02 c0       	rjmp	.+4      	; 0x155a <GPIO_readPin+0x9c>
    1556:	55 95       	asr	r21
    1558:	47 95       	ror	r20
    155a:	8a 95       	dec	r24
    155c:	e2 f7       	brpl	.-8      	; 0x1556 <GPIO_readPin+0x98>
    155e:	ca 01       	movw	r24, r20
    1560:	81 70       	andi	r24, 0x01	; 1
    1562:	90 70       	andi	r25, 0x00	; 0
    1564:	88 23       	and	r24, r24
    1566:	19 f0       	breq	.+6      	; 0x156e <GPIO_readPin+0xb0>
			{
				value= LOGIC_HIGH;
    1568:	81 e0       	ldi	r24, 0x01	; 1
    156a:	89 83       	std	Y+1, r24	; 0x01
    156c:	49 c0       	rjmp	.+146    	; 0x1600 <GPIO_readPin+0x142>
			}
			else
			{
				value= LOGIC_LOW;
    156e:	19 82       	std	Y+1, r1	; 0x01
    1570:	47 c0       	rjmp	.+142    	; 0x1600 <GPIO_readPin+0x142>
			}
			break;

		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1572:	e6 e3       	ldi	r30, 0x36	; 54
    1574:	f0 e0       	ldi	r31, 0x00	; 0
    1576:	80 81       	ld	r24, Z
    1578:	28 2f       	mov	r18, r24
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	8b 81       	ldd	r24, Y+3	; 0x03
    157e:	88 2f       	mov	r24, r24
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	a9 01       	movw	r20, r18
    1584:	02 c0       	rjmp	.+4      	; 0x158a <GPIO_readPin+0xcc>
    1586:	55 95       	asr	r21
    1588:	47 95       	ror	r20
    158a:	8a 95       	dec	r24
    158c:	e2 f7       	brpl	.-8      	; 0x1586 <GPIO_readPin+0xc8>
    158e:	ca 01       	movw	r24, r20
    1590:	81 70       	andi	r24, 0x01	; 1
    1592:	90 70       	andi	r25, 0x00	; 0
    1594:	88 23       	and	r24, r24
    1596:	19 f0       	breq	.+6      	; 0x159e <GPIO_readPin+0xe0>
			{
				value= LOGIC_HIGH;
    1598:	81 e0       	ldi	r24, 0x01	; 1
    159a:	89 83       	std	Y+1, r24	; 0x01
    159c:	31 c0       	rjmp	.+98     	; 0x1600 <GPIO_readPin+0x142>
			}
			else
			{
				value= LOGIC_LOW;
    159e:	19 82       	std	Y+1, r1	; 0x01
    15a0:	2f c0       	rjmp	.+94     	; 0x1600 <GPIO_readPin+0x142>
			}
			break;

		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    15a2:	e3 e3       	ldi	r30, 0x33	; 51
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	80 81       	ld	r24, Z
    15a8:	28 2f       	mov	r18, r24
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	8b 81       	ldd	r24, Y+3	; 0x03
    15ae:	88 2f       	mov	r24, r24
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	a9 01       	movw	r20, r18
    15b4:	02 c0       	rjmp	.+4      	; 0x15ba <GPIO_readPin+0xfc>
    15b6:	55 95       	asr	r21
    15b8:	47 95       	ror	r20
    15ba:	8a 95       	dec	r24
    15bc:	e2 f7       	brpl	.-8      	; 0x15b6 <GPIO_readPin+0xf8>
    15be:	ca 01       	movw	r24, r20
    15c0:	81 70       	andi	r24, 0x01	; 1
    15c2:	90 70       	andi	r25, 0x00	; 0
    15c4:	88 23       	and	r24, r24
    15c6:	19 f0       	breq	.+6      	; 0x15ce <GPIO_readPin+0x110>
			{
				value= LOGIC_HIGH;
    15c8:	81 e0       	ldi	r24, 0x01	; 1
    15ca:	89 83       	std	Y+1, r24	; 0x01
    15cc:	19 c0       	rjmp	.+50     	; 0x1600 <GPIO_readPin+0x142>
			}
			else
			{
				value= LOGIC_LOW;
    15ce:	19 82       	std	Y+1, r1	; 0x01
    15d0:	17 c0       	rjmp	.+46     	; 0x1600 <GPIO_readPin+0x142>
			}
			break;

		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    15d2:	e0 e3       	ldi	r30, 0x30	; 48
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	80 81       	ld	r24, Z
    15d8:	28 2f       	mov	r18, r24
    15da:	30 e0       	ldi	r19, 0x00	; 0
    15dc:	8b 81       	ldd	r24, Y+3	; 0x03
    15de:	88 2f       	mov	r24, r24
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	a9 01       	movw	r20, r18
    15e4:	02 c0       	rjmp	.+4      	; 0x15ea <GPIO_readPin+0x12c>
    15e6:	55 95       	asr	r21
    15e8:	47 95       	ror	r20
    15ea:	8a 95       	dec	r24
    15ec:	e2 f7       	brpl	.-8      	; 0x15e6 <GPIO_readPin+0x128>
    15ee:	ca 01       	movw	r24, r20
    15f0:	81 70       	andi	r24, 0x01	; 1
    15f2:	90 70       	andi	r25, 0x00	; 0
    15f4:	88 23       	and	r24, r24
    15f6:	19 f0       	breq	.+6      	; 0x15fe <GPIO_readPin+0x140>
			{
				value= LOGIC_HIGH;
    15f8:	81 e0       	ldi	r24, 0x01	; 1
    15fa:	89 83       	std	Y+1, r24	; 0x01
    15fc:	01 c0       	rjmp	.+2      	; 0x1600 <GPIO_readPin+0x142>
			}
			else
			{
				value= LOGIC_LOW;
    15fe:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}
	return value;
    1600:	89 81       	ldd	r24, Y+1	; 0x01
}
    1602:	27 96       	adiw	r28, 0x07	; 7
    1604:	0f b6       	in	r0, 0x3f	; 63
    1606:	f8 94       	cli
    1608:	de bf       	out	0x3e, r29	; 62
    160a:	0f be       	out	0x3f, r0	; 63
    160c:	cd bf       	out	0x3d, r28	; 61
    160e:	cf 91       	pop	r28
    1610:	df 91       	pop	r29
    1612:	08 95       	ret

00001614 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1614:	df 93       	push	r29
    1616:	cf 93       	push	r28
    1618:	00 d0       	rcall	.+0      	; 0x161a <GPIO_setupPortDirection+0x6>
    161a:	00 d0       	rcall	.+0      	; 0x161c <GPIO_setupPortDirection+0x8>
    161c:	cd b7       	in	r28, 0x3d	; 61
    161e:	de b7       	in	r29, 0x3e	; 62
    1620:	89 83       	std	Y+1, r24	; 0x01
    1622:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num > NUM_OF_PORTS )
    1624:	89 81       	ldd	r24, Y+1	; 0x01
    1626:	85 30       	cpi	r24, 0x05	; 5
    1628:	90 f5       	brcc	.+100    	; 0x168e <GPIO_setupPortDirection+0x7a>
	{
		/* DO Nothing */
	}
	else
	{
		switch(port_num)
    162a:	89 81       	ldd	r24, Y+1	; 0x01
    162c:	28 2f       	mov	r18, r24
    162e:	30 e0       	ldi	r19, 0x00	; 0
    1630:	3c 83       	std	Y+4, r19	; 0x04
    1632:	2b 83       	std	Y+3, r18	; 0x03
    1634:	8b 81       	ldd	r24, Y+3	; 0x03
    1636:	9c 81       	ldd	r25, Y+4	; 0x04
    1638:	81 30       	cpi	r24, 0x01	; 1
    163a:	91 05       	cpc	r25, r1
    163c:	d1 f0       	breq	.+52     	; 0x1672 <GPIO_setupPortDirection+0x5e>
    163e:	2b 81       	ldd	r18, Y+3	; 0x03
    1640:	3c 81       	ldd	r19, Y+4	; 0x04
    1642:	22 30       	cpi	r18, 0x02	; 2
    1644:	31 05       	cpc	r19, r1
    1646:	2c f4       	brge	.+10     	; 0x1652 <GPIO_setupPortDirection+0x3e>
    1648:	8b 81       	ldd	r24, Y+3	; 0x03
    164a:	9c 81       	ldd	r25, Y+4	; 0x04
    164c:	00 97       	sbiw	r24, 0x00	; 0
    164e:	61 f0       	breq	.+24     	; 0x1668 <GPIO_setupPortDirection+0x54>
    1650:	1e c0       	rjmp	.+60     	; 0x168e <GPIO_setupPortDirection+0x7a>
    1652:	2b 81       	ldd	r18, Y+3	; 0x03
    1654:	3c 81       	ldd	r19, Y+4	; 0x04
    1656:	22 30       	cpi	r18, 0x02	; 2
    1658:	31 05       	cpc	r19, r1
    165a:	81 f0       	breq	.+32     	; 0x167c <GPIO_setupPortDirection+0x68>
    165c:	8b 81       	ldd	r24, Y+3	; 0x03
    165e:	9c 81       	ldd	r25, Y+4	; 0x04
    1660:	83 30       	cpi	r24, 0x03	; 3
    1662:	91 05       	cpc	r25, r1
    1664:	81 f0       	breq	.+32     	; 0x1686 <GPIO_setupPortDirection+0x72>
    1666:	13 c0       	rjmp	.+38     	; 0x168e <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA=direction;
    1668:	ea e3       	ldi	r30, 0x3A	; 58
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	8a 81       	ldd	r24, Y+2	; 0x02
    166e:	80 83       	st	Z, r24
    1670:	0e c0       	rjmp	.+28     	; 0x168e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB=direction;
    1672:	e7 e3       	ldi	r30, 0x37	; 55
    1674:	f0 e0       	ldi	r31, 0x00	; 0
    1676:	8a 81       	ldd	r24, Y+2	; 0x02
    1678:	80 83       	st	Z, r24
    167a:	09 c0       	rjmp	.+18     	; 0x168e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC=direction;
    167c:	e4 e3       	ldi	r30, 0x34	; 52
    167e:	f0 e0       	ldi	r31, 0x00	; 0
    1680:	8a 81       	ldd	r24, Y+2	; 0x02
    1682:	80 83       	st	Z, r24
    1684:	04 c0       	rjmp	.+8      	; 0x168e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD=direction;
    1686:	e1 e3       	ldi	r30, 0x31	; 49
    1688:	f0 e0       	ldi	r31, 0x00	; 0
    168a:	8a 81       	ldd	r24, Y+2	; 0x02
    168c:	80 83       	st	Z, r24
			break;
		}
	}
}
    168e:	0f 90       	pop	r0
    1690:	0f 90       	pop	r0
    1692:	0f 90       	pop	r0
    1694:	0f 90       	pop	r0
    1696:	cf 91       	pop	r28
    1698:	df 91       	pop	r29
    169a:	08 95       	ret

0000169c <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    169c:	df 93       	push	r29
    169e:	cf 93       	push	r28
    16a0:	00 d0       	rcall	.+0      	; 0x16a2 <GPIO_writePort+0x6>
    16a2:	00 d0       	rcall	.+0      	; 0x16a4 <GPIO_writePort+0x8>
    16a4:	cd b7       	in	r28, 0x3d	; 61
    16a6:	de b7       	in	r29, 0x3e	; 62
    16a8:	89 83       	std	Y+1, r24	; 0x01
    16aa:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num > NUM_OF_PORTS )
    16ac:	89 81       	ldd	r24, Y+1	; 0x01
    16ae:	85 30       	cpi	r24, 0x05	; 5
    16b0:	90 f5       	brcc	.+100    	; 0x1716 <GPIO_writePort+0x7a>
	{
		/* DO Nothing */
	}
	else
	{
		switch(port_num)
    16b2:	89 81       	ldd	r24, Y+1	; 0x01
    16b4:	28 2f       	mov	r18, r24
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	3c 83       	std	Y+4, r19	; 0x04
    16ba:	2b 83       	std	Y+3, r18	; 0x03
    16bc:	8b 81       	ldd	r24, Y+3	; 0x03
    16be:	9c 81       	ldd	r25, Y+4	; 0x04
    16c0:	81 30       	cpi	r24, 0x01	; 1
    16c2:	91 05       	cpc	r25, r1
    16c4:	d1 f0       	breq	.+52     	; 0x16fa <GPIO_writePort+0x5e>
    16c6:	2b 81       	ldd	r18, Y+3	; 0x03
    16c8:	3c 81       	ldd	r19, Y+4	; 0x04
    16ca:	22 30       	cpi	r18, 0x02	; 2
    16cc:	31 05       	cpc	r19, r1
    16ce:	2c f4       	brge	.+10     	; 0x16da <GPIO_writePort+0x3e>
    16d0:	8b 81       	ldd	r24, Y+3	; 0x03
    16d2:	9c 81       	ldd	r25, Y+4	; 0x04
    16d4:	00 97       	sbiw	r24, 0x00	; 0
    16d6:	61 f0       	breq	.+24     	; 0x16f0 <GPIO_writePort+0x54>
    16d8:	1e c0       	rjmp	.+60     	; 0x1716 <GPIO_writePort+0x7a>
    16da:	2b 81       	ldd	r18, Y+3	; 0x03
    16dc:	3c 81       	ldd	r19, Y+4	; 0x04
    16de:	22 30       	cpi	r18, 0x02	; 2
    16e0:	31 05       	cpc	r19, r1
    16e2:	81 f0       	breq	.+32     	; 0x1704 <GPIO_writePort+0x68>
    16e4:	8b 81       	ldd	r24, Y+3	; 0x03
    16e6:	9c 81       	ldd	r25, Y+4	; 0x04
    16e8:	83 30       	cpi	r24, 0x03	; 3
    16ea:	91 05       	cpc	r25, r1
    16ec:	81 f0       	breq	.+32     	; 0x170e <GPIO_writePort+0x72>
    16ee:	13 c0       	rjmp	.+38     	; 0x1716 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA=value;
    16f0:	eb e3       	ldi	r30, 0x3B	; 59
    16f2:	f0 e0       	ldi	r31, 0x00	; 0
    16f4:	8a 81       	ldd	r24, Y+2	; 0x02
    16f6:	80 83       	st	Z, r24
    16f8:	0e c0       	rjmp	.+28     	; 0x1716 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB=value;
    16fa:	e8 e3       	ldi	r30, 0x38	; 56
    16fc:	f0 e0       	ldi	r31, 0x00	; 0
    16fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1700:	80 83       	st	Z, r24
    1702:	09 c0       	rjmp	.+18     	; 0x1716 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC=value;
    1704:	e5 e3       	ldi	r30, 0x35	; 53
    1706:	f0 e0       	ldi	r31, 0x00	; 0
    1708:	8a 81       	ldd	r24, Y+2	; 0x02
    170a:	80 83       	st	Z, r24
    170c:	04 c0       	rjmp	.+8      	; 0x1716 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD=value;
    170e:	e2 e3       	ldi	r30, 0x32	; 50
    1710:	f0 e0       	ldi	r31, 0x00	; 0
    1712:	8a 81       	ldd	r24, Y+2	; 0x02
    1714:	80 83       	st	Z, r24
			break;
		}
	}
}
    1716:	0f 90       	pop	r0
    1718:	0f 90       	pop	r0
    171a:	0f 90       	pop	r0
    171c:	0f 90       	pop	r0
    171e:	cf 91       	pop	r28
    1720:	df 91       	pop	r29
    1722:	08 95       	ret

00001724 <read_Port>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 read_Port(uint8 port_num)
{
    1724:	df 93       	push	r29
    1726:	cf 93       	push	r28
    1728:	00 d0       	rcall	.+0      	; 0x172a <read_Port+0x6>
    172a:	00 d0       	rcall	.+0      	; 0x172c <read_Port+0x8>
    172c:	cd b7       	in	r28, 0x3d	; 61
    172e:	de b7       	in	r29, 0x3e	; 62
    1730:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value=LOGIC_LOW;
    1732:	19 82       	std	Y+1, r1	; 0x01

	if(port_num > NUM_OF_PORTS )
    1734:	8a 81       	ldd	r24, Y+2	; 0x02
    1736:	85 30       	cpi	r24, 0x05	; 5
    1738:	90 f5       	brcc	.+100    	; 0x179e <read_Port+0x7a>
	{
		/* DO Nothing */
	}
	else
	{
		switch(port_num)
    173a:	8a 81       	ldd	r24, Y+2	; 0x02
    173c:	28 2f       	mov	r18, r24
    173e:	30 e0       	ldi	r19, 0x00	; 0
    1740:	3c 83       	std	Y+4, r19	; 0x04
    1742:	2b 83       	std	Y+3, r18	; 0x03
    1744:	8b 81       	ldd	r24, Y+3	; 0x03
    1746:	9c 81       	ldd	r25, Y+4	; 0x04
    1748:	81 30       	cpi	r24, 0x01	; 1
    174a:	91 05       	cpc	r25, r1
    174c:	d1 f0       	breq	.+52     	; 0x1782 <read_Port+0x5e>
    174e:	2b 81       	ldd	r18, Y+3	; 0x03
    1750:	3c 81       	ldd	r19, Y+4	; 0x04
    1752:	22 30       	cpi	r18, 0x02	; 2
    1754:	31 05       	cpc	r19, r1
    1756:	2c f4       	brge	.+10     	; 0x1762 <read_Port+0x3e>
    1758:	8b 81       	ldd	r24, Y+3	; 0x03
    175a:	9c 81       	ldd	r25, Y+4	; 0x04
    175c:	00 97       	sbiw	r24, 0x00	; 0
    175e:	61 f0       	breq	.+24     	; 0x1778 <read_Port+0x54>
    1760:	1e c0       	rjmp	.+60     	; 0x179e <read_Port+0x7a>
    1762:	2b 81       	ldd	r18, Y+3	; 0x03
    1764:	3c 81       	ldd	r19, Y+4	; 0x04
    1766:	22 30       	cpi	r18, 0x02	; 2
    1768:	31 05       	cpc	r19, r1
    176a:	81 f0       	breq	.+32     	; 0x178c <read_Port+0x68>
    176c:	8b 81       	ldd	r24, Y+3	; 0x03
    176e:	9c 81       	ldd	r25, Y+4	; 0x04
    1770:	83 30       	cpi	r24, 0x03	; 3
    1772:	91 05       	cpc	r25, r1
    1774:	81 f0       	breq	.+32     	; 0x1796 <read_Port+0x72>
    1776:	13 c0       	rjmp	.+38     	; 0x179e <read_Port+0x7a>
		{
		case PORTA_ID:
			value= PINA;
    1778:	e9 e3       	ldi	r30, 0x39	; 57
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	80 81       	ld	r24, Z
    177e:	89 83       	std	Y+1, r24	; 0x01
    1780:	0e c0       	rjmp	.+28     	; 0x179e <read_Port+0x7a>
			break;
		case PORTB_ID:
			value= PINB;
    1782:	e6 e3       	ldi	r30, 0x36	; 54
    1784:	f0 e0       	ldi	r31, 0x00	; 0
    1786:	80 81       	ld	r24, Z
    1788:	89 83       	std	Y+1, r24	; 0x01
    178a:	09 c0       	rjmp	.+18     	; 0x179e <read_Port+0x7a>
			break;
		case PORTC_ID:
			value= PINC;
    178c:	e3 e3       	ldi	r30, 0x33	; 51
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	80 81       	ld	r24, Z
    1792:	89 83       	std	Y+1, r24	; 0x01
    1794:	04 c0       	rjmp	.+8      	; 0x179e <read_Port+0x7a>
			break;
		case PORTD_ID:
			value= PIND;
    1796:	e0 e3       	ldi	r30, 0x30	; 48
    1798:	f0 e0       	ldi	r31, 0x00	; 0
    179a:	80 81       	ld	r24, Z
    179c:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return value;
    179e:	89 81       	ldd	r24, Y+1	; 0x01
}
    17a0:	0f 90       	pop	r0
    17a2:	0f 90       	pop	r0
    17a4:	0f 90       	pop	r0
    17a6:	0f 90       	pop	r0
    17a8:	cf 91       	pop	r28
    17aa:	df 91       	pop	r29
    17ac:	08 95       	ret

000017ae <KEYPAD_getPressedKey>:

/**************************************************
 *             Functions Definitions              *
 *************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    17ae:	df 93       	push	r29
    17b0:	cf 93       	push	r28
    17b2:	cd b7       	in	r28, 0x3d	; 61
    17b4:	de b7       	in	r29, 0x3e	; 62
    17b6:	60 97       	sbiw	r28, 0x10	; 16
    17b8:	0f b6       	in	r0, 0x3f	; 63
    17ba:	f8 94       	cli
    17bc:	de bf       	out	0x3e, r29	; 62
    17be:	0f be       	out	0x3f, r0	; 63
    17c0:	cd bf       	out	0x3d, r28	; 61
	uint8 row,col;

	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    17c2:	81 e0       	ldi	r24, 0x01	; 1
    17c4:	64 e0       	ldi	r22, 0x04	; 4
    17c6:	40 e0       	ldi	r20, 0x00	; 0
    17c8:	0e 94 69 08 	call	0x10d2	; 0x10d2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    17cc:	81 e0       	ldi	r24, 0x01	; 1
    17ce:	65 e0       	ldi	r22, 0x05	; 5
    17d0:	40 e0       	ldi	r20, 0x00	; 0
    17d2:	0e 94 69 08 	call	0x10d2	; 0x10d2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    17d6:	81 e0       	ldi	r24, 0x01	; 1
    17d8:	66 e0       	ldi	r22, 0x06	; 6
    17da:	40 e0       	ldi	r20, 0x00	; 0
    17dc:	0e 94 69 08 	call	0x10d2	; 0x10d2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    17e0:	81 e0       	ldi	r24, 0x01	; 1
    17e2:	67 e0       	ldi	r22, 0x07	; 7
    17e4:	40 e0       	ldi	r20, 0x00	; 0
    17e6:	0e 94 69 08 	call	0x10d2	; 0x10d2 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    17ea:	83 e0       	ldi	r24, 0x03	; 3
    17ec:	62 e0       	ldi	r22, 0x02	; 2
    17ee:	40 e0       	ldi	r20, 0x00	; 0
    17f0:	0e 94 69 08 	call	0x10d2	; 0x10d2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    17f4:	83 e0       	ldi	r24, 0x03	; 3
    17f6:	63 e0       	ldi	r22, 0x03	; 3
    17f8:	40 e0       	ldi	r20, 0x00	; 0
    17fa:	0e 94 69 08 	call	0x10d2	; 0x10d2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    17fe:	83 e0       	ldi	r24, 0x03	; 3
    1800:	64 e0       	ldi	r22, 0x04	; 4
    1802:	40 e0       	ldi	r20, 0x00	; 0
    1804:	0e 94 69 08 	call	0x10d2	; 0x10d2 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS==4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    1808:	83 e0       	ldi	r24, 0x03	; 3
    180a:	65 e0       	ldi	r22, 0x05	; 5
    180c:	40 e0       	ldi	r20, 0x00	; 0
    180e:	0e 94 69 08 	call	0x10d2	; 0x10d2 <GPIO_setupPinDirection>
#endif

	while(1)
	{
		for(row=0; row<KEYPAD_NUM_ROWS; row++)
    1812:	18 8a       	std	Y+16, r1	; 0x10
    1814:	b1 c0       	rjmp	.+354    	; 0x1978 <KEYPAD_getPressedKey+0x1ca>
		{
			/*
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			*/
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, PIN_OUTPUT);
    1816:	88 89       	ldd	r24, Y+16	; 0x10
    1818:	98 2f       	mov	r25, r24
    181a:	9c 5f       	subi	r25, 0xFC	; 252
    181c:	81 e0       	ldi	r24, 0x01	; 1
    181e:	69 2f       	mov	r22, r25
    1820:	41 e0       	ldi	r20, 0x01	; 1
    1822:	0e 94 69 08 	call	0x10d2	; 0x10d2 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin according to button connection*/
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, KEYPAD_BUTTON_PRESSED);
    1826:	81 e0       	ldi	r24, 0x01	; 1
    1828:	64 e0       	ldi	r22, 0x04	; 4
    182a:	40 e0       	ldi	r20, 0x00	; 0
    182c:	0e 94 64 09 	call	0x12c8	; 0x12c8 <GPIO_writePin>
			for(col=0; col<KEYPAD_NUM_COLS; col++)
    1830:	1f 86       	std	Y+15, r1	; 0x0f
    1832:	22 c0       	rjmp	.+68     	; 0x1878 <KEYPAD_getPressedKey+0xca>
			{
				if(GPIO_readPin(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+col)== KEYPAD_BUTTON_PRESSED)
    1834:	8f 85       	ldd	r24, Y+15	; 0x0f
    1836:	98 2f       	mov	r25, r24
    1838:	9e 5f       	subi	r25, 0xFE	; 254
    183a:	83 e0       	ldi	r24, 0x03	; 3
    183c:	69 2f       	mov	r22, r25
    183e:	0e 94 5f 0a 	call	0x14be	; 0x14be <GPIO_readPin>
    1842:	88 23       	and	r24, r24
    1844:	b1 f4       	brne	.+44     	; 0x1872 <KEYPAD_getPressedKey+0xc4>
                        #endif
                    #elif(KEYPAD_NUM_COLS==4)
                        #ifdef STANDRAD_KEYPAD
		                    return (row*KEYPAD_NUM_COLS)+col+1;
                        #else
		                    return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1846:	88 89       	ldd	r24, Y+16	; 0x10
    1848:	88 2f       	mov	r24, r24
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	88 0f       	add	r24, r24
    184e:	99 1f       	adc	r25, r25
    1850:	88 0f       	add	r24, r24
    1852:	99 1f       	adc	r25, r25
    1854:	98 2f       	mov	r25, r24
    1856:	8f 85       	ldd	r24, Y+15	; 0x0f
    1858:	89 0f       	add	r24, r25
    185a:	8f 5f       	subi	r24, 0xFF	; 255
    185c:	0e 94 c1 0c 	call	0x1982	; 0x1982 <KEYPAD_4x4_adjustKeyNumber>

			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, PIN_INPUT);
			_delay_ms(5);
		}
	}
}
    1860:	60 96       	adiw	r28, 0x10	; 16
    1862:	0f b6       	in	r0, 0x3f	; 63
    1864:	f8 94       	cli
    1866:	de bf       	out	0x3e, r29	; 62
    1868:	0f be       	out	0x3f, r0	; 63
    186a:	cd bf       	out	0x3d, r28	; 61
    186c:	cf 91       	pop	r28
    186e:	df 91       	pop	r29
    1870:	08 95       	ret
			*/
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, PIN_OUTPUT);

			/* Set/Clear the row output pin according to button connection*/
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, KEYPAD_BUTTON_PRESSED);
			for(col=0; col<KEYPAD_NUM_COLS; col++)
    1872:	8f 85       	ldd	r24, Y+15	; 0x0f
    1874:	8f 5f       	subi	r24, 0xFF	; 255
    1876:	8f 87       	std	Y+15, r24	; 0x0f
    1878:	8f 85       	ldd	r24, Y+15	; 0x0f
    187a:	84 30       	cpi	r24, 0x04	; 4
    187c:	d8 f2       	brcs	.-74     	; 0x1834 <KEYPAD_getPressedKey+0x86>
	                    #endif
                    #endif
				}
			}

			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, PIN_INPUT);
    187e:	88 89       	ldd	r24, Y+16	; 0x10
    1880:	98 2f       	mov	r25, r24
    1882:	9c 5f       	subi	r25, 0xFC	; 252
    1884:	81 e0       	ldi	r24, 0x01	; 1
    1886:	69 2f       	mov	r22, r25
    1888:	40 e0       	ldi	r20, 0x00	; 0
    188a:	0e 94 69 08 	call	0x10d2	; 0x10d2 <GPIO_setupPinDirection>
    188e:	80 e0       	ldi	r24, 0x00	; 0
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	a0 ea       	ldi	r26, 0xA0	; 160
    1894:	b0 e4       	ldi	r27, 0x40	; 64
    1896:	8b 87       	std	Y+11, r24	; 0x0b
    1898:	9c 87       	std	Y+12, r25	; 0x0c
    189a:	ad 87       	std	Y+13, r26	; 0x0d
    189c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    189e:	6b 85       	ldd	r22, Y+11	; 0x0b
    18a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    18a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    18a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    18a6:	20 e0       	ldi	r18, 0x00	; 0
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	4a e7       	ldi	r20, 0x7A	; 122
    18ac:	55 e4       	ldi	r21, 0x45	; 69
    18ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18b2:	dc 01       	movw	r26, r24
    18b4:	cb 01       	movw	r24, r22
    18b6:	8f 83       	std	Y+7, r24	; 0x07
    18b8:	98 87       	std	Y+8, r25	; 0x08
    18ba:	a9 87       	std	Y+9, r26	; 0x09
    18bc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18be:	6f 81       	ldd	r22, Y+7	; 0x07
    18c0:	78 85       	ldd	r23, Y+8	; 0x08
    18c2:	89 85       	ldd	r24, Y+9	; 0x09
    18c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    18c6:	20 e0       	ldi	r18, 0x00	; 0
    18c8:	30 e0       	ldi	r19, 0x00	; 0
    18ca:	40 e8       	ldi	r20, 0x80	; 128
    18cc:	5f e3       	ldi	r21, 0x3F	; 63
    18ce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18d2:	88 23       	and	r24, r24
    18d4:	2c f4       	brge	.+10     	; 0x18e0 <KEYPAD_getPressedKey+0x132>
		__ticks = 1;
    18d6:	81 e0       	ldi	r24, 0x01	; 1
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	9e 83       	std	Y+6, r25	; 0x06
    18dc:	8d 83       	std	Y+5, r24	; 0x05
    18de:	3f c0       	rjmp	.+126    	; 0x195e <KEYPAD_getPressedKey+0x1b0>
	else if (__tmp > 65535)
    18e0:	6f 81       	ldd	r22, Y+7	; 0x07
    18e2:	78 85       	ldd	r23, Y+8	; 0x08
    18e4:	89 85       	ldd	r24, Y+9	; 0x09
    18e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    18e8:	20 e0       	ldi	r18, 0x00	; 0
    18ea:	3f ef       	ldi	r19, 0xFF	; 255
    18ec:	4f e7       	ldi	r20, 0x7F	; 127
    18ee:	57 e4       	ldi	r21, 0x47	; 71
    18f0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18f4:	18 16       	cp	r1, r24
    18f6:	4c f5       	brge	.+82     	; 0x194a <KEYPAD_getPressedKey+0x19c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    18fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    18fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    18fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1900:	20 e0       	ldi	r18, 0x00	; 0
    1902:	30 e0       	ldi	r19, 0x00	; 0
    1904:	40 e2       	ldi	r20, 0x20	; 32
    1906:	51 e4       	ldi	r21, 0x41	; 65
    1908:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    190c:	dc 01       	movw	r26, r24
    190e:	cb 01       	movw	r24, r22
    1910:	bc 01       	movw	r22, r24
    1912:	cd 01       	movw	r24, r26
    1914:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1918:	dc 01       	movw	r26, r24
    191a:	cb 01       	movw	r24, r22
    191c:	9e 83       	std	Y+6, r25	; 0x06
    191e:	8d 83       	std	Y+5, r24	; 0x05
    1920:	0f c0       	rjmp	.+30     	; 0x1940 <KEYPAD_getPressedKey+0x192>
    1922:	80 e9       	ldi	r24, 0x90	; 144
    1924:	91 e0       	ldi	r25, 0x01	; 1
    1926:	9c 83       	std	Y+4, r25	; 0x04
    1928:	8b 83       	std	Y+3, r24	; 0x03
    192a:	8b 81       	ldd	r24, Y+3	; 0x03
    192c:	9c 81       	ldd	r25, Y+4	; 0x04
    192e:	01 97       	sbiw	r24, 0x01	; 1
    1930:	f1 f7       	brne	.-4      	; 0x192e <KEYPAD_getPressedKey+0x180>
    1932:	9c 83       	std	Y+4, r25	; 0x04
    1934:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1936:	8d 81       	ldd	r24, Y+5	; 0x05
    1938:	9e 81       	ldd	r25, Y+6	; 0x06
    193a:	01 97       	sbiw	r24, 0x01	; 1
    193c:	9e 83       	std	Y+6, r25	; 0x06
    193e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1940:	8d 81       	ldd	r24, Y+5	; 0x05
    1942:	9e 81       	ldd	r25, Y+6	; 0x06
    1944:	00 97       	sbiw	r24, 0x00	; 0
    1946:	69 f7       	brne	.-38     	; 0x1922 <KEYPAD_getPressedKey+0x174>
    1948:	14 c0       	rjmp	.+40     	; 0x1972 <KEYPAD_getPressedKey+0x1c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    194a:	6f 81       	ldd	r22, Y+7	; 0x07
    194c:	78 85       	ldd	r23, Y+8	; 0x08
    194e:	89 85       	ldd	r24, Y+9	; 0x09
    1950:	9a 85       	ldd	r25, Y+10	; 0x0a
    1952:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1956:	dc 01       	movw	r26, r24
    1958:	cb 01       	movw	r24, r22
    195a:	9e 83       	std	Y+6, r25	; 0x06
    195c:	8d 83       	std	Y+5, r24	; 0x05
    195e:	8d 81       	ldd	r24, Y+5	; 0x05
    1960:	9e 81       	ldd	r25, Y+6	; 0x06
    1962:	9a 83       	std	Y+2, r25	; 0x02
    1964:	89 83       	std	Y+1, r24	; 0x01
    1966:	89 81       	ldd	r24, Y+1	; 0x01
    1968:	9a 81       	ldd	r25, Y+2	; 0x02
    196a:	01 97       	sbiw	r24, 0x01	; 1
    196c:	f1 f7       	brne	.-4      	; 0x196a <KEYPAD_getPressedKey+0x1bc>
    196e:	9a 83       	std	Y+2, r25	; 0x02
    1970:	89 83       	std	Y+1, r24	; 0x01
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif

	while(1)
	{
		for(row=0; row<KEYPAD_NUM_ROWS; row++)
    1972:	88 89       	ldd	r24, Y+16	; 0x10
    1974:	8f 5f       	subi	r24, 0xFF	; 255
    1976:	88 8b       	std	Y+16, r24	; 0x10
    1978:	88 89       	ldd	r24, Y+16	; 0x10
    197a:	84 30       	cpi	r24, 0x04	; 4
    197c:	08 f4       	brcc	.+2      	; 0x1980 <KEYPAD_getPressedKey+0x1d2>
    197e:	4b cf       	rjmp	.-362    	; 0x1816 <KEYPAD_getPressedKey+0x68>
    1980:	48 cf       	rjmp	.-368    	; 0x1812 <KEYPAD_getPressedKey+0x64>

00001982 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1982:	df 93       	push	r29
    1984:	cf 93       	push	r28
    1986:	00 d0       	rcall	.+0      	; 0x1988 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1988:	00 d0       	rcall	.+0      	; 0x198a <KEYPAD_4x4_adjustKeyNumber+0x8>
    198a:	cd b7       	in	r28, 0x3d	; 61
    198c:	de b7       	in	r29, 0x3e	; 62
    198e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button=0;
    1990:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1992:	8a 81       	ldd	r24, Y+2	; 0x02
    1994:	28 2f       	mov	r18, r24
    1996:	30 e0       	ldi	r19, 0x00	; 0
    1998:	3c 83       	std	Y+4, r19	; 0x04
    199a:	2b 83       	std	Y+3, r18	; 0x03
    199c:	8b 81       	ldd	r24, Y+3	; 0x03
    199e:	9c 81       	ldd	r25, Y+4	; 0x04
    19a0:	88 30       	cpi	r24, 0x08	; 8
    19a2:	91 05       	cpc	r25, r1
    19a4:	09 f4       	brne	.+2      	; 0x19a8 <KEYPAD_4x4_adjustKeyNumber+0x26>
    19a6:	70 c0       	rjmp	.+224    	; 0x1a88 <KEYPAD_4x4_adjustKeyNumber+0x106>
    19a8:	2b 81       	ldd	r18, Y+3	; 0x03
    19aa:	3c 81       	ldd	r19, Y+4	; 0x04
    19ac:	29 30       	cpi	r18, 0x09	; 9
    19ae:	31 05       	cpc	r19, r1
    19b0:	5c f5       	brge	.+86     	; 0x1a08 <KEYPAD_4x4_adjustKeyNumber+0x86>
    19b2:	8b 81       	ldd	r24, Y+3	; 0x03
    19b4:	9c 81       	ldd	r25, Y+4	; 0x04
    19b6:	84 30       	cpi	r24, 0x04	; 4
    19b8:	91 05       	cpc	r25, r1
    19ba:	09 f4       	brne	.+2      	; 0x19be <KEYPAD_4x4_adjustKeyNumber+0x3c>
    19bc:	59 c0       	rjmp	.+178    	; 0x1a70 <KEYPAD_4x4_adjustKeyNumber+0xee>
    19be:	2b 81       	ldd	r18, Y+3	; 0x03
    19c0:	3c 81       	ldd	r19, Y+4	; 0x04
    19c2:	25 30       	cpi	r18, 0x05	; 5
    19c4:	31 05       	cpc	r19, r1
    19c6:	9c f4       	brge	.+38     	; 0x19ee <KEYPAD_4x4_adjustKeyNumber+0x6c>
    19c8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ca:	9c 81       	ldd	r25, Y+4	; 0x04
    19cc:	82 30       	cpi	r24, 0x02	; 2
    19ce:	91 05       	cpc	r25, r1
    19d0:	09 f4       	brne	.+2      	; 0x19d4 <KEYPAD_4x4_adjustKeyNumber+0x52>
    19d2:	48 c0       	rjmp	.+144    	; 0x1a64 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    19d4:	2b 81       	ldd	r18, Y+3	; 0x03
    19d6:	3c 81       	ldd	r19, Y+4	; 0x04
    19d8:	23 30       	cpi	r18, 0x03	; 3
    19da:	31 05       	cpc	r19, r1
    19dc:	0c f0       	brlt	.+2      	; 0x19e0 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    19de:	45 c0       	rjmp	.+138    	; 0x1a6a <KEYPAD_4x4_adjustKeyNumber+0xe8>
    19e0:	8b 81       	ldd	r24, Y+3	; 0x03
    19e2:	9c 81       	ldd	r25, Y+4	; 0x04
    19e4:	81 30       	cpi	r24, 0x01	; 1
    19e6:	91 05       	cpc	r25, r1
    19e8:	09 f4       	brne	.+2      	; 0x19ec <KEYPAD_4x4_adjustKeyNumber+0x6a>
    19ea:	39 c0       	rjmp	.+114    	; 0x1a5e <KEYPAD_4x4_adjustKeyNumber+0xdc>
    19ec:	67 c0       	rjmp	.+206    	; 0x1abc <KEYPAD_4x4_adjustKeyNumber+0x13a>
    19ee:	2b 81       	ldd	r18, Y+3	; 0x03
    19f0:	3c 81       	ldd	r19, Y+4	; 0x04
    19f2:	26 30       	cpi	r18, 0x06	; 6
    19f4:	31 05       	cpc	r19, r1
    19f6:	09 f4       	brne	.+2      	; 0x19fa <KEYPAD_4x4_adjustKeyNumber+0x78>
    19f8:	41 c0       	rjmp	.+130    	; 0x1a7c <KEYPAD_4x4_adjustKeyNumber+0xfa>
    19fa:	8b 81       	ldd	r24, Y+3	; 0x03
    19fc:	9c 81       	ldd	r25, Y+4	; 0x04
    19fe:	87 30       	cpi	r24, 0x07	; 7
    1a00:	91 05       	cpc	r25, r1
    1a02:	0c f0       	brlt	.+2      	; 0x1a06 <KEYPAD_4x4_adjustKeyNumber+0x84>
    1a04:	3e c0       	rjmp	.+124    	; 0x1a82 <KEYPAD_4x4_adjustKeyNumber+0x100>
    1a06:	37 c0       	rjmp	.+110    	; 0x1a76 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1a08:	2b 81       	ldd	r18, Y+3	; 0x03
    1a0a:	3c 81       	ldd	r19, Y+4	; 0x04
    1a0c:	2c 30       	cpi	r18, 0x0C	; 12
    1a0e:	31 05       	cpc	r19, r1
    1a10:	09 f4       	brne	.+2      	; 0x1a14 <KEYPAD_4x4_adjustKeyNumber+0x92>
    1a12:	46 c0       	rjmp	.+140    	; 0x1aa0 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1a14:	8b 81       	ldd	r24, Y+3	; 0x03
    1a16:	9c 81       	ldd	r25, Y+4	; 0x04
    1a18:	8d 30       	cpi	r24, 0x0D	; 13
    1a1a:	91 05       	cpc	r25, r1
    1a1c:	5c f4       	brge	.+22     	; 0x1a34 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1a1e:	2b 81       	ldd	r18, Y+3	; 0x03
    1a20:	3c 81       	ldd	r19, Y+4	; 0x04
    1a22:	2a 30       	cpi	r18, 0x0A	; 10
    1a24:	31 05       	cpc	r19, r1
    1a26:	b1 f1       	breq	.+108    	; 0x1a94 <KEYPAD_4x4_adjustKeyNumber+0x112>
    1a28:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a2c:	8b 30       	cpi	r24, 0x0B	; 11
    1a2e:	91 05       	cpc	r25, r1
    1a30:	a4 f5       	brge	.+104    	; 0x1a9a <KEYPAD_4x4_adjustKeyNumber+0x118>
    1a32:	2d c0       	rjmp	.+90     	; 0x1a8e <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1a34:	2b 81       	ldd	r18, Y+3	; 0x03
    1a36:	3c 81       	ldd	r19, Y+4	; 0x04
    1a38:	2e 30       	cpi	r18, 0x0E	; 14
    1a3a:	31 05       	cpc	r19, r1
    1a3c:	b9 f1       	breq	.+110    	; 0x1aac <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1a3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a40:	9c 81       	ldd	r25, Y+4	; 0x04
    1a42:	8e 30       	cpi	r24, 0x0E	; 14
    1a44:	91 05       	cpc	r25, r1
    1a46:	7c f1       	brlt	.+94     	; 0x1aa6 <KEYPAD_4x4_adjustKeyNumber+0x124>
    1a48:	2b 81       	ldd	r18, Y+3	; 0x03
    1a4a:	3c 81       	ldd	r19, Y+4	; 0x04
    1a4c:	2f 30       	cpi	r18, 0x0F	; 15
    1a4e:	31 05       	cpc	r19, r1
    1a50:	79 f1       	breq	.+94     	; 0x1ab0 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1a52:	8b 81       	ldd	r24, Y+3	; 0x03
    1a54:	9c 81       	ldd	r25, Y+4	; 0x04
    1a56:	80 31       	cpi	r24, 0x10	; 16
    1a58:	91 05       	cpc	r25, r1
    1a5a:	69 f1       	breq	.+90     	; 0x1ab6 <KEYPAD_4x4_adjustKeyNumber+0x134>
    1a5c:	2f c0       	rjmp	.+94     	; 0x1abc <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
	case 1:
		keypad_button=7;
    1a5e:	87 e0       	ldi	r24, 0x07	; 7
    1a60:	89 83       	std	Y+1, r24	; 0x01
    1a62:	2e c0       	rjmp	.+92     	; 0x1ac0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 2:
		keypad_button=8;
    1a64:	88 e0       	ldi	r24, 0x08	; 8
    1a66:	89 83       	std	Y+1, r24	; 0x01
    1a68:	2b c0       	rjmp	.+86     	; 0x1ac0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 3:
		keypad_button=9;
    1a6a:	89 e0       	ldi	r24, 0x09	; 9
    1a6c:	89 83       	std	Y+1, r24	; 0x01
    1a6e:	28 c0       	rjmp	.+80     	; 0x1ac0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 4:
		keypad_button='/';
    1a70:	8f e2       	ldi	r24, 0x2F	; 47
    1a72:	89 83       	std	Y+1, r24	; 0x01
    1a74:	25 c0       	rjmp	.+74     	; 0x1ac0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 5:
		keypad_button=4;
    1a76:	84 e0       	ldi	r24, 0x04	; 4
    1a78:	89 83       	std	Y+1, r24	; 0x01
    1a7a:	22 c0       	rjmp	.+68     	; 0x1ac0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 6:
		keypad_button=5;
    1a7c:	85 e0       	ldi	r24, 0x05	; 5
    1a7e:	89 83       	std	Y+1, r24	; 0x01
    1a80:	1f c0       	rjmp	.+62     	; 0x1ac0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 7:
		keypad_button=6;
    1a82:	86 e0       	ldi	r24, 0x06	; 6
    1a84:	89 83       	std	Y+1, r24	; 0x01
    1a86:	1c c0       	rjmp	.+56     	; 0x1ac0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 8:
		keypad_button='*';
    1a88:	8a e2       	ldi	r24, 0x2A	; 42
    1a8a:	89 83       	std	Y+1, r24	; 0x01
    1a8c:	19 c0       	rjmp	.+50     	; 0x1ac0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 9:
		keypad_button=1;
    1a8e:	81 e0       	ldi	r24, 0x01	; 1
    1a90:	89 83       	std	Y+1, r24	; 0x01
    1a92:	16 c0       	rjmp	.+44     	; 0x1ac0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 10:
		keypad_button=2;
    1a94:	82 e0       	ldi	r24, 0x02	; 2
    1a96:	89 83       	std	Y+1, r24	; 0x01
    1a98:	13 c0       	rjmp	.+38     	; 0x1ac0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 11:
		keypad_button=3;
    1a9a:	83 e0       	ldi	r24, 0x03	; 3
    1a9c:	89 83       	std	Y+1, r24	; 0x01
    1a9e:	10 c0       	rjmp	.+32     	; 0x1ac0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 12:
		keypad_button='-';
    1aa0:	8d e2       	ldi	r24, 0x2D	; 45
    1aa2:	89 83       	std	Y+1, r24	; 0x01
    1aa4:	0d c0       	rjmp	.+26     	; 0x1ac0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 13:
		keypad_button=13;
    1aa6:	8d e0       	ldi	r24, 0x0D	; 13
    1aa8:	89 83       	std	Y+1, r24	; 0x01
    1aaa:	0a c0       	rjmp	.+20     	; 0x1ac0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 14:
		keypad_button=0;
    1aac:	19 82       	std	Y+1, r1	; 0x01
    1aae:	08 c0       	rjmp	.+16     	; 0x1ac0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 15:
		keypad_button='=';
    1ab0:	8d e3       	ldi	r24, 0x3D	; 61
    1ab2:	89 83       	std	Y+1, r24	; 0x01
    1ab4:	05 c0       	rjmp	.+10     	; 0x1ac0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 16:
		keypad_button='+';
    1ab6:	8b e2       	ldi	r24, 0x2B	; 43
    1ab8:	89 83       	std	Y+1, r24	; 0x01
    1aba:	02 c0       	rjmp	.+4      	; 0x1ac0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	default:
		keypad_button=button_number;
    1abc:	8a 81       	ldd	r24, Y+2	; 0x02
    1abe:	89 83       	std	Y+1, r24	; 0x01
	}

	return keypad_button;
    1ac0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ac2:	0f 90       	pop	r0
    1ac4:	0f 90       	pop	r0
    1ac6:	0f 90       	pop	r0
    1ac8:	0f 90       	pop	r0
    1aca:	cf 91       	pop	r28
    1acc:	df 91       	pop	r29
    1ace:	08 95       	ret

00001ad0 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
*/
void LCD_sendCommand(uint8 command)
{
    1ad0:	df 93       	push	r29
    1ad2:	cf 93       	push	r28
    1ad4:	cd b7       	in	r28, 0x3d	; 61
    1ad6:	de b7       	in	r29, 0x3e	; 62
    1ad8:	e9 97       	sbiw	r28, 0x39	; 57
    1ada:	0f b6       	in	r0, 0x3f	; 63
    1adc:	f8 94       	cli
    1ade:	de bf       	out	0x3e, r29	; 62
    1ae0:	0f be       	out	0x3f, r0	; 63
    1ae2:	cd bf       	out	0x3d, r28	; 61
    1ae4:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW);    /* instruction mode RS=0 */
    1ae6:	80 e0       	ldi	r24, 0x00	; 0
    1ae8:	61 e0       	ldi	r22, 0x01	; 1
    1aea:	40 e0       	ldi	r20, 0x00	; 0
    1aec:	0e 94 64 09 	call	0x12c8	; 0x12c8 <GPIO_writePin>
    1af0:	80 e0       	ldi	r24, 0x00	; 0
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	a0 e8       	ldi	r26, 0x80	; 128
    1af6:	bf e3       	ldi	r27, 0x3F	; 63
    1af8:	8d ab       	std	Y+53, r24	; 0x35
    1afa:	9e ab       	std	Y+54, r25	; 0x36
    1afc:	af ab       	std	Y+55, r26	; 0x37
    1afe:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b00:	6d a9       	ldd	r22, Y+53	; 0x35
    1b02:	7e a9       	ldd	r23, Y+54	; 0x36
    1b04:	8f a9       	ldd	r24, Y+55	; 0x37
    1b06:	98 ad       	ldd	r25, Y+56	; 0x38
    1b08:	20 e0       	ldi	r18, 0x00	; 0
    1b0a:	30 e0       	ldi	r19, 0x00	; 0
    1b0c:	4a e7       	ldi	r20, 0x7A	; 122
    1b0e:	55 e4       	ldi	r21, 0x45	; 69
    1b10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b14:	dc 01       	movw	r26, r24
    1b16:	cb 01       	movw	r24, r22
    1b18:	89 ab       	std	Y+49, r24	; 0x31
    1b1a:	9a ab       	std	Y+50, r25	; 0x32
    1b1c:	ab ab       	std	Y+51, r26	; 0x33
    1b1e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1b20:	69 a9       	ldd	r22, Y+49	; 0x31
    1b22:	7a a9       	ldd	r23, Y+50	; 0x32
    1b24:	8b a9       	ldd	r24, Y+51	; 0x33
    1b26:	9c a9       	ldd	r25, Y+52	; 0x34
    1b28:	20 e0       	ldi	r18, 0x00	; 0
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	40 e8       	ldi	r20, 0x80	; 128
    1b2e:	5f e3       	ldi	r21, 0x3F	; 63
    1b30:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b34:	88 23       	and	r24, r24
    1b36:	2c f4       	brge	.+10     	; 0x1b42 <LCD_sendCommand+0x72>
		__ticks = 1;
    1b38:	81 e0       	ldi	r24, 0x01	; 1
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	98 ab       	std	Y+48, r25	; 0x30
    1b3e:	8f a7       	std	Y+47, r24	; 0x2f
    1b40:	3f c0       	rjmp	.+126    	; 0x1bc0 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    1b42:	69 a9       	ldd	r22, Y+49	; 0x31
    1b44:	7a a9       	ldd	r23, Y+50	; 0x32
    1b46:	8b a9       	ldd	r24, Y+51	; 0x33
    1b48:	9c a9       	ldd	r25, Y+52	; 0x34
    1b4a:	20 e0       	ldi	r18, 0x00	; 0
    1b4c:	3f ef       	ldi	r19, 0xFF	; 255
    1b4e:	4f e7       	ldi	r20, 0x7F	; 127
    1b50:	57 e4       	ldi	r21, 0x47	; 71
    1b52:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b56:	18 16       	cp	r1, r24
    1b58:	4c f5       	brge	.+82     	; 0x1bac <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b5a:	6d a9       	ldd	r22, Y+53	; 0x35
    1b5c:	7e a9       	ldd	r23, Y+54	; 0x36
    1b5e:	8f a9       	ldd	r24, Y+55	; 0x37
    1b60:	98 ad       	ldd	r25, Y+56	; 0x38
    1b62:	20 e0       	ldi	r18, 0x00	; 0
    1b64:	30 e0       	ldi	r19, 0x00	; 0
    1b66:	40 e2       	ldi	r20, 0x20	; 32
    1b68:	51 e4       	ldi	r21, 0x41	; 65
    1b6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b6e:	dc 01       	movw	r26, r24
    1b70:	cb 01       	movw	r24, r22
    1b72:	bc 01       	movw	r22, r24
    1b74:	cd 01       	movw	r24, r26
    1b76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b7a:	dc 01       	movw	r26, r24
    1b7c:	cb 01       	movw	r24, r22
    1b7e:	98 ab       	std	Y+48, r25	; 0x30
    1b80:	8f a7       	std	Y+47, r24	; 0x2f
    1b82:	0f c0       	rjmp	.+30     	; 0x1ba2 <LCD_sendCommand+0xd2>
    1b84:	80 e9       	ldi	r24, 0x90	; 144
    1b86:	91 e0       	ldi	r25, 0x01	; 1
    1b88:	9e a7       	std	Y+46, r25	; 0x2e
    1b8a:	8d a7       	std	Y+45, r24	; 0x2d
    1b8c:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b8e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b90:	01 97       	sbiw	r24, 0x01	; 1
    1b92:	f1 f7       	brne	.-4      	; 0x1b90 <LCD_sendCommand+0xc0>
    1b94:	9e a7       	std	Y+46, r25	; 0x2e
    1b96:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b98:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b9a:	98 a9       	ldd	r25, Y+48	; 0x30
    1b9c:	01 97       	sbiw	r24, 0x01	; 1
    1b9e:	98 ab       	std	Y+48, r25	; 0x30
    1ba0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ba2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ba4:	98 a9       	ldd	r25, Y+48	; 0x30
    1ba6:	00 97       	sbiw	r24, 0x00	; 0
    1ba8:	69 f7       	brne	.-38     	; 0x1b84 <LCD_sendCommand+0xb4>
    1baa:	14 c0       	rjmp	.+40     	; 0x1bd4 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bac:	69 a9       	ldd	r22, Y+49	; 0x31
    1bae:	7a a9       	ldd	r23, Y+50	; 0x32
    1bb0:	8b a9       	ldd	r24, Y+51	; 0x33
    1bb2:	9c a9       	ldd	r25, Y+52	; 0x34
    1bb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bb8:	dc 01       	movw	r26, r24
    1bba:	cb 01       	movw	r24, r22
    1bbc:	98 ab       	std	Y+48, r25	; 0x30
    1bbe:	8f a7       	std	Y+47, r24	; 0x2f
    1bc0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bc2:	98 a9       	ldd	r25, Y+48	; 0x30
    1bc4:	9c a7       	std	Y+44, r25	; 0x2c
    1bc6:	8b a7       	std	Y+43, r24	; 0x2b
    1bc8:	8b a5       	ldd	r24, Y+43	; 0x2b
    1bca:	9c a5       	ldd	r25, Y+44	; 0x2c
    1bcc:	01 97       	sbiw	r24, 0x01	; 1
    1bce:	f1 f7       	brne	.-4      	; 0x1bcc <LCD_sendCommand+0xfc>
    1bd0:	9c a7       	std	Y+44, r25	; 0x2c
    1bd2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);      /* delay for tas=50 ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);    /* enable LCD E=1 */
    1bd4:	80 e0       	ldi	r24, 0x00	; 0
    1bd6:	62 e0       	ldi	r22, 0x02	; 2
    1bd8:	41 e0       	ldi	r20, 0x01	; 1
    1bda:	0e 94 64 09 	call	0x12c8	; 0x12c8 <GPIO_writePin>
    1bde:	80 e0       	ldi	r24, 0x00	; 0
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	a0 e8       	ldi	r26, 0x80	; 128
    1be4:	bf e3       	ldi	r27, 0x3F	; 63
    1be6:	8f a3       	std	Y+39, r24	; 0x27
    1be8:	98 a7       	std	Y+40, r25	; 0x28
    1bea:	a9 a7       	std	Y+41, r26	; 0x29
    1bec:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bee:	6f a1       	ldd	r22, Y+39	; 0x27
    1bf0:	78 a5       	ldd	r23, Y+40	; 0x28
    1bf2:	89 a5       	ldd	r24, Y+41	; 0x29
    1bf4:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bf6:	20 e0       	ldi	r18, 0x00	; 0
    1bf8:	30 e0       	ldi	r19, 0x00	; 0
    1bfa:	4a e7       	ldi	r20, 0x7A	; 122
    1bfc:	55 e4       	ldi	r21, 0x45	; 69
    1bfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c02:	dc 01       	movw	r26, r24
    1c04:	cb 01       	movw	r24, r22
    1c06:	8b a3       	std	Y+35, r24	; 0x23
    1c08:	9c a3       	std	Y+36, r25	; 0x24
    1c0a:	ad a3       	std	Y+37, r26	; 0x25
    1c0c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1c0e:	6b a1       	ldd	r22, Y+35	; 0x23
    1c10:	7c a1       	ldd	r23, Y+36	; 0x24
    1c12:	8d a1       	ldd	r24, Y+37	; 0x25
    1c14:	9e a1       	ldd	r25, Y+38	; 0x26
    1c16:	20 e0       	ldi	r18, 0x00	; 0
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	40 e8       	ldi	r20, 0x80	; 128
    1c1c:	5f e3       	ldi	r21, 0x3F	; 63
    1c1e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c22:	88 23       	and	r24, r24
    1c24:	2c f4       	brge	.+10     	; 0x1c30 <LCD_sendCommand+0x160>
		__ticks = 1;
    1c26:	81 e0       	ldi	r24, 0x01	; 1
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	9a a3       	std	Y+34, r25	; 0x22
    1c2c:	89 a3       	std	Y+33, r24	; 0x21
    1c2e:	3f c0       	rjmp	.+126    	; 0x1cae <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    1c30:	6b a1       	ldd	r22, Y+35	; 0x23
    1c32:	7c a1       	ldd	r23, Y+36	; 0x24
    1c34:	8d a1       	ldd	r24, Y+37	; 0x25
    1c36:	9e a1       	ldd	r25, Y+38	; 0x26
    1c38:	20 e0       	ldi	r18, 0x00	; 0
    1c3a:	3f ef       	ldi	r19, 0xFF	; 255
    1c3c:	4f e7       	ldi	r20, 0x7F	; 127
    1c3e:	57 e4       	ldi	r21, 0x47	; 71
    1c40:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c44:	18 16       	cp	r1, r24
    1c46:	4c f5       	brge	.+82     	; 0x1c9a <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c48:	6f a1       	ldd	r22, Y+39	; 0x27
    1c4a:	78 a5       	ldd	r23, Y+40	; 0x28
    1c4c:	89 a5       	ldd	r24, Y+41	; 0x29
    1c4e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c50:	20 e0       	ldi	r18, 0x00	; 0
    1c52:	30 e0       	ldi	r19, 0x00	; 0
    1c54:	40 e2       	ldi	r20, 0x20	; 32
    1c56:	51 e4       	ldi	r21, 0x41	; 65
    1c58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c5c:	dc 01       	movw	r26, r24
    1c5e:	cb 01       	movw	r24, r22
    1c60:	bc 01       	movw	r22, r24
    1c62:	cd 01       	movw	r24, r26
    1c64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c68:	dc 01       	movw	r26, r24
    1c6a:	cb 01       	movw	r24, r22
    1c6c:	9a a3       	std	Y+34, r25	; 0x22
    1c6e:	89 a3       	std	Y+33, r24	; 0x21
    1c70:	0f c0       	rjmp	.+30     	; 0x1c90 <LCD_sendCommand+0x1c0>
    1c72:	80 e9       	ldi	r24, 0x90	; 144
    1c74:	91 e0       	ldi	r25, 0x01	; 1
    1c76:	98 a3       	std	Y+32, r25	; 0x20
    1c78:	8f 8f       	std	Y+31, r24	; 0x1f
    1c7a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c7c:	98 a1       	ldd	r25, Y+32	; 0x20
    1c7e:	01 97       	sbiw	r24, 0x01	; 1
    1c80:	f1 f7       	brne	.-4      	; 0x1c7e <LCD_sendCommand+0x1ae>
    1c82:	98 a3       	std	Y+32, r25	; 0x20
    1c84:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c86:	89 a1       	ldd	r24, Y+33	; 0x21
    1c88:	9a a1       	ldd	r25, Y+34	; 0x22
    1c8a:	01 97       	sbiw	r24, 0x01	; 1
    1c8c:	9a a3       	std	Y+34, r25	; 0x22
    1c8e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c90:	89 a1       	ldd	r24, Y+33	; 0x21
    1c92:	9a a1       	ldd	r25, Y+34	; 0x22
    1c94:	00 97       	sbiw	r24, 0x00	; 0
    1c96:	69 f7       	brne	.-38     	; 0x1c72 <LCD_sendCommand+0x1a2>
    1c98:	14 c0       	rjmp	.+40     	; 0x1cc2 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c9a:	6b a1       	ldd	r22, Y+35	; 0x23
    1c9c:	7c a1       	ldd	r23, Y+36	; 0x24
    1c9e:	8d a1       	ldd	r24, Y+37	; 0x25
    1ca0:	9e a1       	ldd	r25, Y+38	; 0x26
    1ca2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ca6:	dc 01       	movw	r26, r24
    1ca8:	cb 01       	movw	r24, r22
    1caa:	9a a3       	std	Y+34, r25	; 0x22
    1cac:	89 a3       	std	Y+33, r24	; 0x21
    1cae:	89 a1       	ldd	r24, Y+33	; 0x21
    1cb0:	9a a1       	ldd	r25, Y+34	; 0x22
    1cb2:	9e 8f       	std	Y+30, r25	; 0x1e
    1cb4:	8d 8f       	std	Y+29, r24	; 0x1d
    1cb6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1cb8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1cba:	01 97       	sbiw	r24, 0x01	; 1
    1cbc:	f1 f7       	brne	.-4      	; 0x1cba <LCD_sendCommand+0x1ea>
    1cbe:	9e 8f       	std	Y+30, r25	; 0x1e
    1cc0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);      /* delay for tdsw = 100 ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);    /* disable LCD E=0 */
	_delay_ms(1);      /* delay for th = 13 ns */

    #elif(LCD_DATA_BITS_MODE==8)
	GPIO_writePort(LCD_DATA_PORT_ID,command);               /* out the required command*/
    1cc2:	82 e0       	ldi	r24, 0x02	; 2
    1cc4:	69 ad       	ldd	r22, Y+57	; 0x39
    1cc6:	0e 94 4e 0b 	call	0x169c	; 0x169c <GPIO_writePort>
    1cca:	80 e0       	ldi	r24, 0x00	; 0
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	a0 e8       	ldi	r26, 0x80	; 128
    1cd0:	bf e3       	ldi	r27, 0x3F	; 63
    1cd2:	89 8f       	std	Y+25, r24	; 0x19
    1cd4:	9a 8f       	std	Y+26, r25	; 0x1a
    1cd6:	ab 8f       	std	Y+27, r26	; 0x1b
    1cd8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cda:	69 8d       	ldd	r22, Y+25	; 0x19
    1cdc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cde:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ce0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ce2:	20 e0       	ldi	r18, 0x00	; 0
    1ce4:	30 e0       	ldi	r19, 0x00	; 0
    1ce6:	4a e7       	ldi	r20, 0x7A	; 122
    1ce8:	55 e4       	ldi	r21, 0x45	; 69
    1cea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cee:	dc 01       	movw	r26, r24
    1cf0:	cb 01       	movw	r24, r22
    1cf2:	8d 8b       	std	Y+21, r24	; 0x15
    1cf4:	9e 8b       	std	Y+22, r25	; 0x16
    1cf6:	af 8b       	std	Y+23, r26	; 0x17
    1cf8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1cfa:	6d 89       	ldd	r22, Y+21	; 0x15
    1cfc:	7e 89       	ldd	r23, Y+22	; 0x16
    1cfe:	8f 89       	ldd	r24, Y+23	; 0x17
    1d00:	98 8d       	ldd	r25, Y+24	; 0x18
    1d02:	20 e0       	ldi	r18, 0x00	; 0
    1d04:	30 e0       	ldi	r19, 0x00	; 0
    1d06:	40 e8       	ldi	r20, 0x80	; 128
    1d08:	5f e3       	ldi	r21, 0x3F	; 63
    1d0a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d0e:	88 23       	and	r24, r24
    1d10:	2c f4       	brge	.+10     	; 0x1d1c <LCD_sendCommand+0x24c>
		__ticks = 1;
    1d12:	81 e0       	ldi	r24, 0x01	; 1
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	9c 8b       	std	Y+20, r25	; 0x14
    1d18:	8b 8b       	std	Y+19, r24	; 0x13
    1d1a:	3f c0       	rjmp	.+126    	; 0x1d9a <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    1d1c:	6d 89       	ldd	r22, Y+21	; 0x15
    1d1e:	7e 89       	ldd	r23, Y+22	; 0x16
    1d20:	8f 89       	ldd	r24, Y+23	; 0x17
    1d22:	98 8d       	ldd	r25, Y+24	; 0x18
    1d24:	20 e0       	ldi	r18, 0x00	; 0
    1d26:	3f ef       	ldi	r19, 0xFF	; 255
    1d28:	4f e7       	ldi	r20, 0x7F	; 127
    1d2a:	57 e4       	ldi	r21, 0x47	; 71
    1d2c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d30:	18 16       	cp	r1, r24
    1d32:	4c f5       	brge	.+82     	; 0x1d86 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d34:	69 8d       	ldd	r22, Y+25	; 0x19
    1d36:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d38:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d3a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d3c:	20 e0       	ldi	r18, 0x00	; 0
    1d3e:	30 e0       	ldi	r19, 0x00	; 0
    1d40:	40 e2       	ldi	r20, 0x20	; 32
    1d42:	51 e4       	ldi	r21, 0x41	; 65
    1d44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d48:	dc 01       	movw	r26, r24
    1d4a:	cb 01       	movw	r24, r22
    1d4c:	bc 01       	movw	r22, r24
    1d4e:	cd 01       	movw	r24, r26
    1d50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d54:	dc 01       	movw	r26, r24
    1d56:	cb 01       	movw	r24, r22
    1d58:	9c 8b       	std	Y+20, r25	; 0x14
    1d5a:	8b 8b       	std	Y+19, r24	; 0x13
    1d5c:	0f c0       	rjmp	.+30     	; 0x1d7c <LCD_sendCommand+0x2ac>
    1d5e:	80 e9       	ldi	r24, 0x90	; 144
    1d60:	91 e0       	ldi	r25, 0x01	; 1
    1d62:	9a 8b       	std	Y+18, r25	; 0x12
    1d64:	89 8b       	std	Y+17, r24	; 0x11
    1d66:	89 89       	ldd	r24, Y+17	; 0x11
    1d68:	9a 89       	ldd	r25, Y+18	; 0x12
    1d6a:	01 97       	sbiw	r24, 0x01	; 1
    1d6c:	f1 f7       	brne	.-4      	; 0x1d6a <LCD_sendCommand+0x29a>
    1d6e:	9a 8b       	std	Y+18, r25	; 0x12
    1d70:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d72:	8b 89       	ldd	r24, Y+19	; 0x13
    1d74:	9c 89       	ldd	r25, Y+20	; 0x14
    1d76:	01 97       	sbiw	r24, 0x01	; 1
    1d78:	9c 8b       	std	Y+20, r25	; 0x14
    1d7a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d7c:	8b 89       	ldd	r24, Y+19	; 0x13
    1d7e:	9c 89       	ldd	r25, Y+20	; 0x14
    1d80:	00 97       	sbiw	r24, 0x00	; 0
    1d82:	69 f7       	brne	.-38     	; 0x1d5e <LCD_sendCommand+0x28e>
    1d84:	14 c0       	rjmp	.+40     	; 0x1dae <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d86:	6d 89       	ldd	r22, Y+21	; 0x15
    1d88:	7e 89       	ldd	r23, Y+22	; 0x16
    1d8a:	8f 89       	ldd	r24, Y+23	; 0x17
    1d8c:	98 8d       	ldd	r25, Y+24	; 0x18
    1d8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d92:	dc 01       	movw	r26, r24
    1d94:	cb 01       	movw	r24, r22
    1d96:	9c 8b       	std	Y+20, r25	; 0x14
    1d98:	8b 8b       	std	Y+19, r24	; 0x13
    1d9a:	8b 89       	ldd	r24, Y+19	; 0x13
    1d9c:	9c 89       	ldd	r25, Y+20	; 0x14
    1d9e:	98 8b       	std	Y+16, r25	; 0x10
    1da0:	8f 87       	std	Y+15, r24	; 0x0f
    1da2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1da4:	98 89       	ldd	r25, Y+16	; 0x10
    1da6:	01 97       	sbiw	r24, 0x01	; 1
    1da8:	f1 f7       	brne	.-4      	; 0x1da6 <LCD_sendCommand+0x2d6>
    1daa:	98 8b       	std	Y+16, r25	; 0x10
    1dac:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);      /* delay for tdsw = 100 ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);    /* disable LCD E=0 */
    1dae:	80 e0       	ldi	r24, 0x00	; 0
    1db0:	62 e0       	ldi	r22, 0x02	; 2
    1db2:	40 e0       	ldi	r20, 0x00	; 0
    1db4:	0e 94 64 09 	call	0x12c8	; 0x12c8 <GPIO_writePin>
    1db8:	80 e0       	ldi	r24, 0x00	; 0
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	a0 e8       	ldi	r26, 0x80	; 128
    1dbe:	bf e3       	ldi	r27, 0x3F	; 63
    1dc0:	8b 87       	std	Y+11, r24	; 0x0b
    1dc2:	9c 87       	std	Y+12, r25	; 0x0c
    1dc4:	ad 87       	std	Y+13, r26	; 0x0d
    1dc6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dc8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dca:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dcc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dce:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dd0:	20 e0       	ldi	r18, 0x00	; 0
    1dd2:	30 e0       	ldi	r19, 0x00	; 0
    1dd4:	4a e7       	ldi	r20, 0x7A	; 122
    1dd6:	55 e4       	ldi	r21, 0x45	; 69
    1dd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ddc:	dc 01       	movw	r26, r24
    1dde:	cb 01       	movw	r24, r22
    1de0:	8f 83       	std	Y+7, r24	; 0x07
    1de2:	98 87       	std	Y+8, r25	; 0x08
    1de4:	a9 87       	std	Y+9, r26	; 0x09
    1de6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1de8:	6f 81       	ldd	r22, Y+7	; 0x07
    1dea:	78 85       	ldd	r23, Y+8	; 0x08
    1dec:	89 85       	ldd	r24, Y+9	; 0x09
    1dee:	9a 85       	ldd	r25, Y+10	; 0x0a
    1df0:	20 e0       	ldi	r18, 0x00	; 0
    1df2:	30 e0       	ldi	r19, 0x00	; 0
    1df4:	40 e8       	ldi	r20, 0x80	; 128
    1df6:	5f e3       	ldi	r21, 0x3F	; 63
    1df8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dfc:	88 23       	and	r24, r24
    1dfe:	2c f4       	brge	.+10     	; 0x1e0a <LCD_sendCommand+0x33a>
		__ticks = 1;
    1e00:	81 e0       	ldi	r24, 0x01	; 1
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	9e 83       	std	Y+6, r25	; 0x06
    1e06:	8d 83       	std	Y+5, r24	; 0x05
    1e08:	3f c0       	rjmp	.+126    	; 0x1e88 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    1e0a:	6f 81       	ldd	r22, Y+7	; 0x07
    1e0c:	78 85       	ldd	r23, Y+8	; 0x08
    1e0e:	89 85       	ldd	r24, Y+9	; 0x09
    1e10:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e12:	20 e0       	ldi	r18, 0x00	; 0
    1e14:	3f ef       	ldi	r19, 0xFF	; 255
    1e16:	4f e7       	ldi	r20, 0x7F	; 127
    1e18:	57 e4       	ldi	r21, 0x47	; 71
    1e1a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e1e:	18 16       	cp	r1, r24
    1e20:	4c f5       	brge	.+82     	; 0x1e74 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e22:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e24:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e26:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e28:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e2a:	20 e0       	ldi	r18, 0x00	; 0
    1e2c:	30 e0       	ldi	r19, 0x00	; 0
    1e2e:	40 e2       	ldi	r20, 0x20	; 32
    1e30:	51 e4       	ldi	r21, 0x41	; 65
    1e32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e36:	dc 01       	movw	r26, r24
    1e38:	cb 01       	movw	r24, r22
    1e3a:	bc 01       	movw	r22, r24
    1e3c:	cd 01       	movw	r24, r26
    1e3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e42:	dc 01       	movw	r26, r24
    1e44:	cb 01       	movw	r24, r22
    1e46:	9e 83       	std	Y+6, r25	; 0x06
    1e48:	8d 83       	std	Y+5, r24	; 0x05
    1e4a:	0f c0       	rjmp	.+30     	; 0x1e6a <LCD_sendCommand+0x39a>
    1e4c:	80 e9       	ldi	r24, 0x90	; 144
    1e4e:	91 e0       	ldi	r25, 0x01	; 1
    1e50:	9c 83       	std	Y+4, r25	; 0x04
    1e52:	8b 83       	std	Y+3, r24	; 0x03
    1e54:	8b 81       	ldd	r24, Y+3	; 0x03
    1e56:	9c 81       	ldd	r25, Y+4	; 0x04
    1e58:	01 97       	sbiw	r24, 0x01	; 1
    1e5a:	f1 f7       	brne	.-4      	; 0x1e58 <LCD_sendCommand+0x388>
    1e5c:	9c 83       	std	Y+4, r25	; 0x04
    1e5e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e60:	8d 81       	ldd	r24, Y+5	; 0x05
    1e62:	9e 81       	ldd	r25, Y+6	; 0x06
    1e64:	01 97       	sbiw	r24, 0x01	; 1
    1e66:	9e 83       	std	Y+6, r25	; 0x06
    1e68:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e6a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e6c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e6e:	00 97       	sbiw	r24, 0x00	; 0
    1e70:	69 f7       	brne	.-38     	; 0x1e4c <LCD_sendCommand+0x37c>
    1e72:	14 c0       	rjmp	.+40     	; 0x1e9c <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e74:	6f 81       	ldd	r22, Y+7	; 0x07
    1e76:	78 85       	ldd	r23, Y+8	; 0x08
    1e78:	89 85       	ldd	r24, Y+9	; 0x09
    1e7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e80:	dc 01       	movw	r26, r24
    1e82:	cb 01       	movw	r24, r22
    1e84:	9e 83       	std	Y+6, r25	; 0x06
    1e86:	8d 83       	std	Y+5, r24	; 0x05
    1e88:	8d 81       	ldd	r24, Y+5	; 0x05
    1e8a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e8c:	9a 83       	std	Y+2, r25	; 0x02
    1e8e:	89 83       	std	Y+1, r24	; 0x01
    1e90:	89 81       	ldd	r24, Y+1	; 0x01
    1e92:	9a 81       	ldd	r25, Y+2	; 0x02
    1e94:	01 97       	sbiw	r24, 0x01	; 1
    1e96:	f1 f7       	brne	.-4      	; 0x1e94 <LCD_sendCommand+0x3c4>
    1e98:	9a 83       	std	Y+2, r25	; 0x02
    1e9a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);      /* delay for th = 13 ns */

    #endif

}
    1e9c:	e9 96       	adiw	r28, 0x39	; 57
    1e9e:	0f b6       	in	r0, 0x3f	; 63
    1ea0:	f8 94       	cli
    1ea2:	de bf       	out	0x3e, r29	; 62
    1ea4:	0f be       	out	0x3f, r0	; 63
    1ea6:	cd bf       	out	0x3d, r28	; 61
    1ea8:	cf 91       	pop	r28
    1eaa:	df 91       	pop	r29
    1eac:	08 95       	ret

00001eae <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 command)
{
    1eae:	df 93       	push	r29
    1eb0:	cf 93       	push	r28
    1eb2:	cd b7       	in	r28, 0x3d	; 61
    1eb4:	de b7       	in	r29, 0x3e	; 62
    1eb6:	e9 97       	sbiw	r28, 0x39	; 57
    1eb8:	0f b6       	in	r0, 0x3f	; 63
    1eba:	f8 94       	cli
    1ebc:	de bf       	out	0x3e, r29	; 62
    1ebe:	0f be       	out	0x3f, r0	; 63
    1ec0:	cd bf       	out	0x3d, r28	; 61
    1ec2:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH);    /* instruction mode RS=1 */
    1ec4:	80 e0       	ldi	r24, 0x00	; 0
    1ec6:	61 e0       	ldi	r22, 0x01	; 1
    1ec8:	41 e0       	ldi	r20, 0x01	; 1
    1eca:	0e 94 64 09 	call	0x12c8	; 0x12c8 <GPIO_writePin>
    1ece:	80 e0       	ldi	r24, 0x00	; 0
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	a0 e8       	ldi	r26, 0x80	; 128
    1ed4:	bf e3       	ldi	r27, 0x3F	; 63
    1ed6:	8d ab       	std	Y+53, r24	; 0x35
    1ed8:	9e ab       	std	Y+54, r25	; 0x36
    1eda:	af ab       	std	Y+55, r26	; 0x37
    1edc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ede:	6d a9       	ldd	r22, Y+53	; 0x35
    1ee0:	7e a9       	ldd	r23, Y+54	; 0x36
    1ee2:	8f a9       	ldd	r24, Y+55	; 0x37
    1ee4:	98 ad       	ldd	r25, Y+56	; 0x38
    1ee6:	20 e0       	ldi	r18, 0x00	; 0
    1ee8:	30 e0       	ldi	r19, 0x00	; 0
    1eea:	4a e7       	ldi	r20, 0x7A	; 122
    1eec:	55 e4       	ldi	r21, 0x45	; 69
    1eee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ef2:	dc 01       	movw	r26, r24
    1ef4:	cb 01       	movw	r24, r22
    1ef6:	89 ab       	std	Y+49, r24	; 0x31
    1ef8:	9a ab       	std	Y+50, r25	; 0x32
    1efa:	ab ab       	std	Y+51, r26	; 0x33
    1efc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1efe:	69 a9       	ldd	r22, Y+49	; 0x31
    1f00:	7a a9       	ldd	r23, Y+50	; 0x32
    1f02:	8b a9       	ldd	r24, Y+51	; 0x33
    1f04:	9c a9       	ldd	r25, Y+52	; 0x34
    1f06:	20 e0       	ldi	r18, 0x00	; 0
    1f08:	30 e0       	ldi	r19, 0x00	; 0
    1f0a:	40 e8       	ldi	r20, 0x80	; 128
    1f0c:	5f e3       	ldi	r21, 0x3F	; 63
    1f0e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f12:	88 23       	and	r24, r24
    1f14:	2c f4       	brge	.+10     	; 0x1f20 <LCD_displayCharacter+0x72>
		__ticks = 1;
    1f16:	81 e0       	ldi	r24, 0x01	; 1
    1f18:	90 e0       	ldi	r25, 0x00	; 0
    1f1a:	98 ab       	std	Y+48, r25	; 0x30
    1f1c:	8f a7       	std	Y+47, r24	; 0x2f
    1f1e:	3f c0       	rjmp	.+126    	; 0x1f9e <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    1f20:	69 a9       	ldd	r22, Y+49	; 0x31
    1f22:	7a a9       	ldd	r23, Y+50	; 0x32
    1f24:	8b a9       	ldd	r24, Y+51	; 0x33
    1f26:	9c a9       	ldd	r25, Y+52	; 0x34
    1f28:	20 e0       	ldi	r18, 0x00	; 0
    1f2a:	3f ef       	ldi	r19, 0xFF	; 255
    1f2c:	4f e7       	ldi	r20, 0x7F	; 127
    1f2e:	57 e4       	ldi	r21, 0x47	; 71
    1f30:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f34:	18 16       	cp	r1, r24
    1f36:	4c f5       	brge	.+82     	; 0x1f8a <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f38:	6d a9       	ldd	r22, Y+53	; 0x35
    1f3a:	7e a9       	ldd	r23, Y+54	; 0x36
    1f3c:	8f a9       	ldd	r24, Y+55	; 0x37
    1f3e:	98 ad       	ldd	r25, Y+56	; 0x38
    1f40:	20 e0       	ldi	r18, 0x00	; 0
    1f42:	30 e0       	ldi	r19, 0x00	; 0
    1f44:	40 e2       	ldi	r20, 0x20	; 32
    1f46:	51 e4       	ldi	r21, 0x41	; 65
    1f48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f4c:	dc 01       	movw	r26, r24
    1f4e:	cb 01       	movw	r24, r22
    1f50:	bc 01       	movw	r22, r24
    1f52:	cd 01       	movw	r24, r26
    1f54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f58:	dc 01       	movw	r26, r24
    1f5a:	cb 01       	movw	r24, r22
    1f5c:	98 ab       	std	Y+48, r25	; 0x30
    1f5e:	8f a7       	std	Y+47, r24	; 0x2f
    1f60:	0f c0       	rjmp	.+30     	; 0x1f80 <LCD_displayCharacter+0xd2>
    1f62:	80 e9       	ldi	r24, 0x90	; 144
    1f64:	91 e0       	ldi	r25, 0x01	; 1
    1f66:	9e a7       	std	Y+46, r25	; 0x2e
    1f68:	8d a7       	std	Y+45, r24	; 0x2d
    1f6a:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f6c:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f6e:	01 97       	sbiw	r24, 0x01	; 1
    1f70:	f1 f7       	brne	.-4      	; 0x1f6e <LCD_displayCharacter+0xc0>
    1f72:	9e a7       	std	Y+46, r25	; 0x2e
    1f74:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f76:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f78:	98 a9       	ldd	r25, Y+48	; 0x30
    1f7a:	01 97       	sbiw	r24, 0x01	; 1
    1f7c:	98 ab       	std	Y+48, r25	; 0x30
    1f7e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f80:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f82:	98 a9       	ldd	r25, Y+48	; 0x30
    1f84:	00 97       	sbiw	r24, 0x00	; 0
    1f86:	69 f7       	brne	.-38     	; 0x1f62 <LCD_displayCharacter+0xb4>
    1f88:	14 c0       	rjmp	.+40     	; 0x1fb2 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f8a:	69 a9       	ldd	r22, Y+49	; 0x31
    1f8c:	7a a9       	ldd	r23, Y+50	; 0x32
    1f8e:	8b a9       	ldd	r24, Y+51	; 0x33
    1f90:	9c a9       	ldd	r25, Y+52	; 0x34
    1f92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f96:	dc 01       	movw	r26, r24
    1f98:	cb 01       	movw	r24, r22
    1f9a:	98 ab       	std	Y+48, r25	; 0x30
    1f9c:	8f a7       	std	Y+47, r24	; 0x2f
    1f9e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fa0:	98 a9       	ldd	r25, Y+48	; 0x30
    1fa2:	9c a7       	std	Y+44, r25	; 0x2c
    1fa4:	8b a7       	std	Y+43, r24	; 0x2b
    1fa6:	8b a5       	ldd	r24, Y+43	; 0x2b
    1fa8:	9c a5       	ldd	r25, Y+44	; 0x2c
    1faa:	01 97       	sbiw	r24, 0x01	; 1
    1fac:	f1 f7       	brne	.-4      	; 0x1faa <LCD_displayCharacter+0xfc>
    1fae:	9c a7       	std	Y+44, r25	; 0x2c
    1fb0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);      /* delay for tas=50 ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);    /* enable LCD E=1 */
    1fb2:	80 e0       	ldi	r24, 0x00	; 0
    1fb4:	62 e0       	ldi	r22, 0x02	; 2
    1fb6:	41 e0       	ldi	r20, 0x01	; 1
    1fb8:	0e 94 64 09 	call	0x12c8	; 0x12c8 <GPIO_writePin>
    1fbc:	80 e0       	ldi	r24, 0x00	; 0
    1fbe:	90 e0       	ldi	r25, 0x00	; 0
    1fc0:	a0 e8       	ldi	r26, 0x80	; 128
    1fc2:	bf e3       	ldi	r27, 0x3F	; 63
    1fc4:	8f a3       	std	Y+39, r24	; 0x27
    1fc6:	98 a7       	std	Y+40, r25	; 0x28
    1fc8:	a9 a7       	std	Y+41, r26	; 0x29
    1fca:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fcc:	6f a1       	ldd	r22, Y+39	; 0x27
    1fce:	78 a5       	ldd	r23, Y+40	; 0x28
    1fd0:	89 a5       	ldd	r24, Y+41	; 0x29
    1fd2:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fd4:	20 e0       	ldi	r18, 0x00	; 0
    1fd6:	30 e0       	ldi	r19, 0x00	; 0
    1fd8:	4a e7       	ldi	r20, 0x7A	; 122
    1fda:	55 e4       	ldi	r21, 0x45	; 69
    1fdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fe0:	dc 01       	movw	r26, r24
    1fe2:	cb 01       	movw	r24, r22
    1fe4:	8b a3       	std	Y+35, r24	; 0x23
    1fe6:	9c a3       	std	Y+36, r25	; 0x24
    1fe8:	ad a3       	std	Y+37, r26	; 0x25
    1fea:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1fec:	6b a1       	ldd	r22, Y+35	; 0x23
    1fee:	7c a1       	ldd	r23, Y+36	; 0x24
    1ff0:	8d a1       	ldd	r24, Y+37	; 0x25
    1ff2:	9e a1       	ldd	r25, Y+38	; 0x26
    1ff4:	20 e0       	ldi	r18, 0x00	; 0
    1ff6:	30 e0       	ldi	r19, 0x00	; 0
    1ff8:	40 e8       	ldi	r20, 0x80	; 128
    1ffa:	5f e3       	ldi	r21, 0x3F	; 63
    1ffc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2000:	88 23       	and	r24, r24
    2002:	2c f4       	brge	.+10     	; 0x200e <LCD_displayCharacter+0x160>
		__ticks = 1;
    2004:	81 e0       	ldi	r24, 0x01	; 1
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	9a a3       	std	Y+34, r25	; 0x22
    200a:	89 a3       	std	Y+33, r24	; 0x21
    200c:	3f c0       	rjmp	.+126    	; 0x208c <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    200e:	6b a1       	ldd	r22, Y+35	; 0x23
    2010:	7c a1       	ldd	r23, Y+36	; 0x24
    2012:	8d a1       	ldd	r24, Y+37	; 0x25
    2014:	9e a1       	ldd	r25, Y+38	; 0x26
    2016:	20 e0       	ldi	r18, 0x00	; 0
    2018:	3f ef       	ldi	r19, 0xFF	; 255
    201a:	4f e7       	ldi	r20, 0x7F	; 127
    201c:	57 e4       	ldi	r21, 0x47	; 71
    201e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2022:	18 16       	cp	r1, r24
    2024:	4c f5       	brge	.+82     	; 0x2078 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2026:	6f a1       	ldd	r22, Y+39	; 0x27
    2028:	78 a5       	ldd	r23, Y+40	; 0x28
    202a:	89 a5       	ldd	r24, Y+41	; 0x29
    202c:	9a a5       	ldd	r25, Y+42	; 0x2a
    202e:	20 e0       	ldi	r18, 0x00	; 0
    2030:	30 e0       	ldi	r19, 0x00	; 0
    2032:	40 e2       	ldi	r20, 0x20	; 32
    2034:	51 e4       	ldi	r21, 0x41	; 65
    2036:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    203a:	dc 01       	movw	r26, r24
    203c:	cb 01       	movw	r24, r22
    203e:	bc 01       	movw	r22, r24
    2040:	cd 01       	movw	r24, r26
    2042:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2046:	dc 01       	movw	r26, r24
    2048:	cb 01       	movw	r24, r22
    204a:	9a a3       	std	Y+34, r25	; 0x22
    204c:	89 a3       	std	Y+33, r24	; 0x21
    204e:	0f c0       	rjmp	.+30     	; 0x206e <LCD_displayCharacter+0x1c0>
    2050:	80 e9       	ldi	r24, 0x90	; 144
    2052:	91 e0       	ldi	r25, 0x01	; 1
    2054:	98 a3       	std	Y+32, r25	; 0x20
    2056:	8f 8f       	std	Y+31, r24	; 0x1f
    2058:	8f 8d       	ldd	r24, Y+31	; 0x1f
    205a:	98 a1       	ldd	r25, Y+32	; 0x20
    205c:	01 97       	sbiw	r24, 0x01	; 1
    205e:	f1 f7       	brne	.-4      	; 0x205c <LCD_displayCharacter+0x1ae>
    2060:	98 a3       	std	Y+32, r25	; 0x20
    2062:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2064:	89 a1       	ldd	r24, Y+33	; 0x21
    2066:	9a a1       	ldd	r25, Y+34	; 0x22
    2068:	01 97       	sbiw	r24, 0x01	; 1
    206a:	9a a3       	std	Y+34, r25	; 0x22
    206c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    206e:	89 a1       	ldd	r24, Y+33	; 0x21
    2070:	9a a1       	ldd	r25, Y+34	; 0x22
    2072:	00 97       	sbiw	r24, 0x00	; 0
    2074:	69 f7       	brne	.-38     	; 0x2050 <LCD_displayCharacter+0x1a2>
    2076:	14 c0       	rjmp	.+40     	; 0x20a0 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2078:	6b a1       	ldd	r22, Y+35	; 0x23
    207a:	7c a1       	ldd	r23, Y+36	; 0x24
    207c:	8d a1       	ldd	r24, Y+37	; 0x25
    207e:	9e a1       	ldd	r25, Y+38	; 0x26
    2080:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2084:	dc 01       	movw	r26, r24
    2086:	cb 01       	movw	r24, r22
    2088:	9a a3       	std	Y+34, r25	; 0x22
    208a:	89 a3       	std	Y+33, r24	; 0x21
    208c:	89 a1       	ldd	r24, Y+33	; 0x21
    208e:	9a a1       	ldd	r25, Y+34	; 0x22
    2090:	9e 8f       	std	Y+30, r25	; 0x1e
    2092:	8d 8f       	std	Y+29, r24	; 0x1d
    2094:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2096:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2098:	01 97       	sbiw	r24, 0x01	; 1
    209a:	f1 f7       	brne	.-4      	; 0x2098 <LCD_displayCharacter+0x1ea>
    209c:	9e 8f       	std	Y+30, r25	; 0x1e
    209e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);      /* delay for tdsw = 100 ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);    /* disable LCD E=0 */
	_delay_ms(1);      /* delay for th = 13 ns */

    #elif(LCD_DATA_BITS_MODE==8)
	GPIO_writePort(LCD_DATA_PORT_ID,command);               /* out the required command*/
    20a0:	82 e0       	ldi	r24, 0x02	; 2
    20a2:	69 ad       	ldd	r22, Y+57	; 0x39
    20a4:	0e 94 4e 0b 	call	0x169c	; 0x169c <GPIO_writePort>
    20a8:	80 e0       	ldi	r24, 0x00	; 0
    20aa:	90 e0       	ldi	r25, 0x00	; 0
    20ac:	a0 e8       	ldi	r26, 0x80	; 128
    20ae:	bf e3       	ldi	r27, 0x3F	; 63
    20b0:	89 8f       	std	Y+25, r24	; 0x19
    20b2:	9a 8f       	std	Y+26, r25	; 0x1a
    20b4:	ab 8f       	std	Y+27, r26	; 0x1b
    20b6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20b8:	69 8d       	ldd	r22, Y+25	; 0x19
    20ba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20c0:	20 e0       	ldi	r18, 0x00	; 0
    20c2:	30 e0       	ldi	r19, 0x00	; 0
    20c4:	4a e7       	ldi	r20, 0x7A	; 122
    20c6:	55 e4       	ldi	r21, 0x45	; 69
    20c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20cc:	dc 01       	movw	r26, r24
    20ce:	cb 01       	movw	r24, r22
    20d0:	8d 8b       	std	Y+21, r24	; 0x15
    20d2:	9e 8b       	std	Y+22, r25	; 0x16
    20d4:	af 8b       	std	Y+23, r26	; 0x17
    20d6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    20d8:	6d 89       	ldd	r22, Y+21	; 0x15
    20da:	7e 89       	ldd	r23, Y+22	; 0x16
    20dc:	8f 89       	ldd	r24, Y+23	; 0x17
    20de:	98 8d       	ldd	r25, Y+24	; 0x18
    20e0:	20 e0       	ldi	r18, 0x00	; 0
    20e2:	30 e0       	ldi	r19, 0x00	; 0
    20e4:	40 e8       	ldi	r20, 0x80	; 128
    20e6:	5f e3       	ldi	r21, 0x3F	; 63
    20e8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20ec:	88 23       	and	r24, r24
    20ee:	2c f4       	brge	.+10     	; 0x20fa <LCD_displayCharacter+0x24c>
		__ticks = 1;
    20f0:	81 e0       	ldi	r24, 0x01	; 1
    20f2:	90 e0       	ldi	r25, 0x00	; 0
    20f4:	9c 8b       	std	Y+20, r25	; 0x14
    20f6:	8b 8b       	std	Y+19, r24	; 0x13
    20f8:	3f c0       	rjmp	.+126    	; 0x2178 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    20fa:	6d 89       	ldd	r22, Y+21	; 0x15
    20fc:	7e 89       	ldd	r23, Y+22	; 0x16
    20fe:	8f 89       	ldd	r24, Y+23	; 0x17
    2100:	98 8d       	ldd	r25, Y+24	; 0x18
    2102:	20 e0       	ldi	r18, 0x00	; 0
    2104:	3f ef       	ldi	r19, 0xFF	; 255
    2106:	4f e7       	ldi	r20, 0x7F	; 127
    2108:	57 e4       	ldi	r21, 0x47	; 71
    210a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    210e:	18 16       	cp	r1, r24
    2110:	4c f5       	brge	.+82     	; 0x2164 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2112:	69 8d       	ldd	r22, Y+25	; 0x19
    2114:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2116:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2118:	9c 8d       	ldd	r25, Y+28	; 0x1c
    211a:	20 e0       	ldi	r18, 0x00	; 0
    211c:	30 e0       	ldi	r19, 0x00	; 0
    211e:	40 e2       	ldi	r20, 0x20	; 32
    2120:	51 e4       	ldi	r21, 0x41	; 65
    2122:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2126:	dc 01       	movw	r26, r24
    2128:	cb 01       	movw	r24, r22
    212a:	bc 01       	movw	r22, r24
    212c:	cd 01       	movw	r24, r26
    212e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2132:	dc 01       	movw	r26, r24
    2134:	cb 01       	movw	r24, r22
    2136:	9c 8b       	std	Y+20, r25	; 0x14
    2138:	8b 8b       	std	Y+19, r24	; 0x13
    213a:	0f c0       	rjmp	.+30     	; 0x215a <LCD_displayCharacter+0x2ac>
    213c:	80 e9       	ldi	r24, 0x90	; 144
    213e:	91 e0       	ldi	r25, 0x01	; 1
    2140:	9a 8b       	std	Y+18, r25	; 0x12
    2142:	89 8b       	std	Y+17, r24	; 0x11
    2144:	89 89       	ldd	r24, Y+17	; 0x11
    2146:	9a 89       	ldd	r25, Y+18	; 0x12
    2148:	01 97       	sbiw	r24, 0x01	; 1
    214a:	f1 f7       	brne	.-4      	; 0x2148 <LCD_displayCharacter+0x29a>
    214c:	9a 8b       	std	Y+18, r25	; 0x12
    214e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2150:	8b 89       	ldd	r24, Y+19	; 0x13
    2152:	9c 89       	ldd	r25, Y+20	; 0x14
    2154:	01 97       	sbiw	r24, 0x01	; 1
    2156:	9c 8b       	std	Y+20, r25	; 0x14
    2158:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    215a:	8b 89       	ldd	r24, Y+19	; 0x13
    215c:	9c 89       	ldd	r25, Y+20	; 0x14
    215e:	00 97       	sbiw	r24, 0x00	; 0
    2160:	69 f7       	brne	.-38     	; 0x213c <LCD_displayCharacter+0x28e>
    2162:	14 c0       	rjmp	.+40     	; 0x218c <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2164:	6d 89       	ldd	r22, Y+21	; 0x15
    2166:	7e 89       	ldd	r23, Y+22	; 0x16
    2168:	8f 89       	ldd	r24, Y+23	; 0x17
    216a:	98 8d       	ldd	r25, Y+24	; 0x18
    216c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2170:	dc 01       	movw	r26, r24
    2172:	cb 01       	movw	r24, r22
    2174:	9c 8b       	std	Y+20, r25	; 0x14
    2176:	8b 8b       	std	Y+19, r24	; 0x13
    2178:	8b 89       	ldd	r24, Y+19	; 0x13
    217a:	9c 89       	ldd	r25, Y+20	; 0x14
    217c:	98 8b       	std	Y+16, r25	; 0x10
    217e:	8f 87       	std	Y+15, r24	; 0x0f
    2180:	8f 85       	ldd	r24, Y+15	; 0x0f
    2182:	98 89       	ldd	r25, Y+16	; 0x10
    2184:	01 97       	sbiw	r24, 0x01	; 1
    2186:	f1 f7       	brne	.-4      	; 0x2184 <LCD_displayCharacter+0x2d6>
    2188:	98 8b       	std	Y+16, r25	; 0x10
    218a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);      /* delay for tdsw = 100 ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);    /* disable LCD E=0 */
    218c:	80 e0       	ldi	r24, 0x00	; 0
    218e:	62 e0       	ldi	r22, 0x02	; 2
    2190:	40 e0       	ldi	r20, 0x00	; 0
    2192:	0e 94 64 09 	call	0x12c8	; 0x12c8 <GPIO_writePin>
    2196:	80 e0       	ldi	r24, 0x00	; 0
    2198:	90 e0       	ldi	r25, 0x00	; 0
    219a:	a0 e8       	ldi	r26, 0x80	; 128
    219c:	bf e3       	ldi	r27, 0x3F	; 63
    219e:	8b 87       	std	Y+11, r24	; 0x0b
    21a0:	9c 87       	std	Y+12, r25	; 0x0c
    21a2:	ad 87       	std	Y+13, r26	; 0x0d
    21a4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    21a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    21aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    21ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    21ae:	20 e0       	ldi	r18, 0x00	; 0
    21b0:	30 e0       	ldi	r19, 0x00	; 0
    21b2:	4a e7       	ldi	r20, 0x7A	; 122
    21b4:	55 e4       	ldi	r21, 0x45	; 69
    21b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ba:	dc 01       	movw	r26, r24
    21bc:	cb 01       	movw	r24, r22
    21be:	8f 83       	std	Y+7, r24	; 0x07
    21c0:	98 87       	std	Y+8, r25	; 0x08
    21c2:	a9 87       	std	Y+9, r26	; 0x09
    21c4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21c6:	6f 81       	ldd	r22, Y+7	; 0x07
    21c8:	78 85       	ldd	r23, Y+8	; 0x08
    21ca:	89 85       	ldd	r24, Y+9	; 0x09
    21cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    21ce:	20 e0       	ldi	r18, 0x00	; 0
    21d0:	30 e0       	ldi	r19, 0x00	; 0
    21d2:	40 e8       	ldi	r20, 0x80	; 128
    21d4:	5f e3       	ldi	r21, 0x3F	; 63
    21d6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21da:	88 23       	and	r24, r24
    21dc:	2c f4       	brge	.+10     	; 0x21e8 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    21de:	81 e0       	ldi	r24, 0x01	; 1
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	9e 83       	std	Y+6, r25	; 0x06
    21e4:	8d 83       	std	Y+5, r24	; 0x05
    21e6:	3f c0       	rjmp	.+126    	; 0x2266 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    21e8:	6f 81       	ldd	r22, Y+7	; 0x07
    21ea:	78 85       	ldd	r23, Y+8	; 0x08
    21ec:	89 85       	ldd	r24, Y+9	; 0x09
    21ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    21f0:	20 e0       	ldi	r18, 0x00	; 0
    21f2:	3f ef       	ldi	r19, 0xFF	; 255
    21f4:	4f e7       	ldi	r20, 0x7F	; 127
    21f6:	57 e4       	ldi	r21, 0x47	; 71
    21f8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21fc:	18 16       	cp	r1, r24
    21fe:	4c f5       	brge	.+82     	; 0x2252 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2200:	6b 85       	ldd	r22, Y+11	; 0x0b
    2202:	7c 85       	ldd	r23, Y+12	; 0x0c
    2204:	8d 85       	ldd	r24, Y+13	; 0x0d
    2206:	9e 85       	ldd	r25, Y+14	; 0x0e
    2208:	20 e0       	ldi	r18, 0x00	; 0
    220a:	30 e0       	ldi	r19, 0x00	; 0
    220c:	40 e2       	ldi	r20, 0x20	; 32
    220e:	51 e4       	ldi	r21, 0x41	; 65
    2210:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2214:	dc 01       	movw	r26, r24
    2216:	cb 01       	movw	r24, r22
    2218:	bc 01       	movw	r22, r24
    221a:	cd 01       	movw	r24, r26
    221c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2220:	dc 01       	movw	r26, r24
    2222:	cb 01       	movw	r24, r22
    2224:	9e 83       	std	Y+6, r25	; 0x06
    2226:	8d 83       	std	Y+5, r24	; 0x05
    2228:	0f c0       	rjmp	.+30     	; 0x2248 <LCD_displayCharacter+0x39a>
    222a:	80 e9       	ldi	r24, 0x90	; 144
    222c:	91 e0       	ldi	r25, 0x01	; 1
    222e:	9c 83       	std	Y+4, r25	; 0x04
    2230:	8b 83       	std	Y+3, r24	; 0x03
    2232:	8b 81       	ldd	r24, Y+3	; 0x03
    2234:	9c 81       	ldd	r25, Y+4	; 0x04
    2236:	01 97       	sbiw	r24, 0x01	; 1
    2238:	f1 f7       	brne	.-4      	; 0x2236 <LCD_displayCharacter+0x388>
    223a:	9c 83       	std	Y+4, r25	; 0x04
    223c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    223e:	8d 81       	ldd	r24, Y+5	; 0x05
    2240:	9e 81       	ldd	r25, Y+6	; 0x06
    2242:	01 97       	sbiw	r24, 0x01	; 1
    2244:	9e 83       	std	Y+6, r25	; 0x06
    2246:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2248:	8d 81       	ldd	r24, Y+5	; 0x05
    224a:	9e 81       	ldd	r25, Y+6	; 0x06
    224c:	00 97       	sbiw	r24, 0x00	; 0
    224e:	69 f7       	brne	.-38     	; 0x222a <LCD_displayCharacter+0x37c>
    2250:	14 c0       	rjmp	.+40     	; 0x227a <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2252:	6f 81       	ldd	r22, Y+7	; 0x07
    2254:	78 85       	ldd	r23, Y+8	; 0x08
    2256:	89 85       	ldd	r24, Y+9	; 0x09
    2258:	9a 85       	ldd	r25, Y+10	; 0x0a
    225a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    225e:	dc 01       	movw	r26, r24
    2260:	cb 01       	movw	r24, r22
    2262:	9e 83       	std	Y+6, r25	; 0x06
    2264:	8d 83       	std	Y+5, r24	; 0x05
    2266:	8d 81       	ldd	r24, Y+5	; 0x05
    2268:	9e 81       	ldd	r25, Y+6	; 0x06
    226a:	9a 83       	std	Y+2, r25	; 0x02
    226c:	89 83       	std	Y+1, r24	; 0x01
    226e:	89 81       	ldd	r24, Y+1	; 0x01
    2270:	9a 81       	ldd	r25, Y+2	; 0x02
    2272:	01 97       	sbiw	r24, 0x01	; 1
    2274:	f1 f7       	brne	.-4      	; 0x2272 <LCD_displayCharacter+0x3c4>
    2276:	9a 83       	std	Y+2, r25	; 0x02
    2278:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);      /* delay for th = 13 ns */

    #endif
}
    227a:	e9 96       	adiw	r28, 0x39	; 57
    227c:	0f b6       	in	r0, 0x3f	; 63
    227e:	f8 94       	cli
    2280:	de bf       	out	0x3e, r29	; 62
    2282:	0f be       	out	0x3f, r0	; 63
    2284:	cd bf       	out	0x3d, r28	; 61
    2286:	cf 91       	pop	r28
    2288:	df 91       	pop	r29
    228a:	08 95       	ret

0000228c <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init()
{
    228c:	df 93       	push	r29
    228e:	cf 93       	push	r28
    2290:	cd b7       	in	r28, 0x3d	; 61
    2292:	de b7       	in	r29, 0x3e	; 62
    2294:	2e 97       	sbiw	r28, 0x0e	; 14
    2296:	0f b6       	in	r0, 0x3f	; 63
    2298:	f8 94       	cli
    229a:	de bf       	out	0x3e, r29	; 62
    229c:	0f be       	out	0x3f, r0	; 63
    229e:	cd bf       	out	0x3d, r28	; 61
	/* SET  RS and E as OUTPUT PINS */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    22a0:	80 e0       	ldi	r24, 0x00	; 0
    22a2:	61 e0       	ldi	r22, 0x01	; 1
    22a4:	41 e0       	ldi	r20, 0x01	; 1
    22a6:	0e 94 69 08 	call	0x10d2	; 0x10d2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    22aa:	80 e0       	ldi	r24, 0x00	; 0
    22ac:	62 e0       	ldi	r22, 0x02	; 2
    22ae:	41 e0       	ldi	r20, 0x01	; 1
    22b0:	0e 94 69 08 	call	0x10d2	; 0x10d2 <GPIO_setupPinDirection>
    22b4:	80 e0       	ldi	r24, 0x00	; 0
    22b6:	90 e0       	ldi	r25, 0x00	; 0
    22b8:	a0 ea       	ldi	r26, 0xA0	; 160
    22ba:	b1 e4       	ldi	r27, 0x41	; 65
    22bc:	8b 87       	std	Y+11, r24	; 0x0b
    22be:	9c 87       	std	Y+12, r25	; 0x0c
    22c0:	ad 87       	std	Y+13, r26	; 0x0d
    22c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    22c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    22c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    22ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    22cc:	20 e0       	ldi	r18, 0x00	; 0
    22ce:	30 e0       	ldi	r19, 0x00	; 0
    22d0:	4a e7       	ldi	r20, 0x7A	; 122
    22d2:	55 e4       	ldi	r21, 0x45	; 69
    22d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22d8:	dc 01       	movw	r26, r24
    22da:	cb 01       	movw	r24, r22
    22dc:	8f 83       	std	Y+7, r24	; 0x07
    22de:	98 87       	std	Y+8, r25	; 0x08
    22e0:	a9 87       	std	Y+9, r26	; 0x09
    22e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22e4:	6f 81       	ldd	r22, Y+7	; 0x07
    22e6:	78 85       	ldd	r23, Y+8	; 0x08
    22e8:	89 85       	ldd	r24, Y+9	; 0x09
    22ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    22ec:	20 e0       	ldi	r18, 0x00	; 0
    22ee:	30 e0       	ldi	r19, 0x00	; 0
    22f0:	40 e8       	ldi	r20, 0x80	; 128
    22f2:	5f e3       	ldi	r21, 0x3F	; 63
    22f4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22f8:	88 23       	and	r24, r24
    22fa:	2c f4       	brge	.+10     	; 0x2306 <LCD_init+0x7a>
		__ticks = 1;
    22fc:	81 e0       	ldi	r24, 0x01	; 1
    22fe:	90 e0       	ldi	r25, 0x00	; 0
    2300:	9e 83       	std	Y+6, r25	; 0x06
    2302:	8d 83       	std	Y+5, r24	; 0x05
    2304:	3f c0       	rjmp	.+126    	; 0x2384 <LCD_init+0xf8>
	else if (__tmp > 65535)
    2306:	6f 81       	ldd	r22, Y+7	; 0x07
    2308:	78 85       	ldd	r23, Y+8	; 0x08
    230a:	89 85       	ldd	r24, Y+9	; 0x09
    230c:	9a 85       	ldd	r25, Y+10	; 0x0a
    230e:	20 e0       	ldi	r18, 0x00	; 0
    2310:	3f ef       	ldi	r19, 0xFF	; 255
    2312:	4f e7       	ldi	r20, 0x7F	; 127
    2314:	57 e4       	ldi	r21, 0x47	; 71
    2316:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    231a:	18 16       	cp	r1, r24
    231c:	4c f5       	brge	.+82     	; 0x2370 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    231e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2320:	7c 85       	ldd	r23, Y+12	; 0x0c
    2322:	8d 85       	ldd	r24, Y+13	; 0x0d
    2324:	9e 85       	ldd	r25, Y+14	; 0x0e
    2326:	20 e0       	ldi	r18, 0x00	; 0
    2328:	30 e0       	ldi	r19, 0x00	; 0
    232a:	40 e2       	ldi	r20, 0x20	; 32
    232c:	51 e4       	ldi	r21, 0x41	; 65
    232e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2332:	dc 01       	movw	r26, r24
    2334:	cb 01       	movw	r24, r22
    2336:	bc 01       	movw	r22, r24
    2338:	cd 01       	movw	r24, r26
    233a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    233e:	dc 01       	movw	r26, r24
    2340:	cb 01       	movw	r24, r22
    2342:	9e 83       	std	Y+6, r25	; 0x06
    2344:	8d 83       	std	Y+5, r24	; 0x05
    2346:	0f c0       	rjmp	.+30     	; 0x2366 <LCD_init+0xda>
    2348:	80 e9       	ldi	r24, 0x90	; 144
    234a:	91 e0       	ldi	r25, 0x01	; 1
    234c:	9c 83       	std	Y+4, r25	; 0x04
    234e:	8b 83       	std	Y+3, r24	; 0x03
    2350:	8b 81       	ldd	r24, Y+3	; 0x03
    2352:	9c 81       	ldd	r25, Y+4	; 0x04
    2354:	01 97       	sbiw	r24, 0x01	; 1
    2356:	f1 f7       	brne	.-4      	; 0x2354 <LCD_init+0xc8>
    2358:	9c 83       	std	Y+4, r25	; 0x04
    235a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    235c:	8d 81       	ldd	r24, Y+5	; 0x05
    235e:	9e 81       	ldd	r25, Y+6	; 0x06
    2360:	01 97       	sbiw	r24, 0x01	; 1
    2362:	9e 83       	std	Y+6, r25	; 0x06
    2364:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2366:	8d 81       	ldd	r24, Y+5	; 0x05
    2368:	9e 81       	ldd	r25, Y+6	; 0x06
    236a:	00 97       	sbiw	r24, 0x00	; 0
    236c:	69 f7       	brne	.-38     	; 0x2348 <LCD_init+0xbc>
    236e:	14 c0       	rjmp	.+40     	; 0x2398 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2370:	6f 81       	ldd	r22, Y+7	; 0x07
    2372:	78 85       	ldd	r23, Y+8	; 0x08
    2374:	89 85       	ldd	r24, Y+9	; 0x09
    2376:	9a 85       	ldd	r25, Y+10	; 0x0a
    2378:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    237c:	dc 01       	movw	r26, r24
    237e:	cb 01       	movw	r24, r22
    2380:	9e 83       	std	Y+6, r25	; 0x06
    2382:	8d 83       	std	Y+5, r24	; 0x05
    2384:	8d 81       	ldd	r24, Y+5	; 0x05
    2386:	9e 81       	ldd	r25, Y+6	; 0x06
    2388:	9a 83       	std	Y+2, r25	; 0x02
    238a:	89 83       	std	Y+1, r24	; 0x01
    238c:	89 81       	ldd	r24, Y+1	; 0x01
    238e:	9a 81       	ldd	r25, Y+2	; 0x02
    2390:	01 97       	sbiw	r24, 0x01	; 1
    2392:	f1 f7       	brne	.-4      	; 0x2390 <LCD_init+0x104>
    2394:	9a 83       	std	Y+2, r25	; 0x02
    2396:	89 83       	std	Y+1, r24	; 0x01
	/* USE 2 LINES + 4 BITS DATA MODE + 5*7 DOT DISPLAY MODE */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

    #elif(LCD_DATA_BITS_MODE==8)
	/* SET DATA port as output */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    2398:	82 e0       	ldi	r24, 0x02	; 2
    239a:	6f ef       	ldi	r22, 0xFF	; 255
    239c:	0e 94 0a 0b 	call	0x1614	; 0x1614 <GPIO_setupPortDirection>

	/* USE 2 LINES + 8 BITS DATA MODE + 5*7 DOT DISPLAY MODE */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    23a0:	88 e3       	ldi	r24, 0x38	; 56
    23a2:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <LCD_sendCommand>

    #endif

	LCD_sendCommand(LCD_CURSOR_OFF);       /* CURSOR IS OFF */
    23a6:	8c e0       	ldi	r24, 0x0C	; 12
    23a8:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND);    /* CLEAR LCD AT BEGINING */
    23ac:	81 e0       	ldi	r24, 0x01	; 1
    23ae:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <LCD_sendCommand>
}
    23b2:	2e 96       	adiw	r28, 0x0e	; 14
    23b4:	0f b6       	in	r0, 0x3f	; 63
    23b6:	f8 94       	cli
    23b8:	de bf       	out	0x3e, r29	; 62
    23ba:	0f be       	out	0x3f, r0	; 63
    23bc:	cd bf       	out	0x3d, r28	; 61
    23be:	cf 91       	pop	r28
    23c0:	df 91       	pop	r29
    23c2:	08 95       	ret

000023c4 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    23c4:	df 93       	push	r29
    23c6:	cf 93       	push	r28
    23c8:	00 d0       	rcall	.+0      	; 0x23ca <LCD_displayString+0x6>
    23ca:	0f 92       	push	r0
    23cc:	cd b7       	in	r28, 0x3d	; 61
    23ce:	de b7       	in	r29, 0x3e	; 62
    23d0:	9b 83       	std	Y+3, r25	; 0x03
    23d2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    23d4:	19 82       	std	Y+1, r1	; 0x01
    23d6:	0e c0       	rjmp	.+28     	; 0x23f4 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    23d8:	89 81       	ldd	r24, Y+1	; 0x01
    23da:	28 2f       	mov	r18, r24
    23dc:	30 e0       	ldi	r19, 0x00	; 0
    23de:	8a 81       	ldd	r24, Y+2	; 0x02
    23e0:	9b 81       	ldd	r25, Y+3	; 0x03
    23e2:	fc 01       	movw	r30, r24
    23e4:	e2 0f       	add	r30, r18
    23e6:	f3 1f       	adc	r31, r19
    23e8:	80 81       	ld	r24, Z
    23ea:	0e 94 57 0f 	call	0x1eae	; 0x1eae <LCD_displayCharacter>
		i++;
    23ee:	89 81       	ldd	r24, Y+1	; 0x01
    23f0:	8f 5f       	subi	r24, 0xFF	; 255
    23f2:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i=0;
	while(Str[i] != '\0')
    23f4:	89 81       	ldd	r24, Y+1	; 0x01
    23f6:	28 2f       	mov	r18, r24
    23f8:	30 e0       	ldi	r19, 0x00	; 0
    23fa:	8a 81       	ldd	r24, Y+2	; 0x02
    23fc:	9b 81       	ldd	r25, Y+3	; 0x03
    23fe:	fc 01       	movw	r30, r24
    2400:	e2 0f       	add	r30, r18
    2402:	f3 1f       	adc	r31, r19
    2404:	80 81       	ld	r24, Z
    2406:	88 23       	and	r24, r24
    2408:	39 f7       	brne	.-50     	; 0x23d8 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(* Str);
		Str++;
	}
	***********************************************/
}
    240a:	0f 90       	pop	r0
    240c:	0f 90       	pop	r0
    240e:	0f 90       	pop	r0
    2410:	cf 91       	pop	r28
    2412:	df 91       	pop	r29
    2414:	08 95       	ret

00002416 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2416:	df 93       	push	r29
    2418:	cf 93       	push	r28
    241a:	00 d0       	rcall	.+0      	; 0x241c <LCD_moveCursor+0x6>
    241c:	00 d0       	rcall	.+0      	; 0x241e <LCD_moveCursor+0x8>
    241e:	0f 92       	push	r0
    2420:	cd b7       	in	r28, 0x3d	; 61
    2422:	de b7       	in	r29, 0x3e	; 62
    2424:	8a 83       	std	Y+2, r24	; 0x02
    2426:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	switch(row)
    2428:	8a 81       	ldd	r24, Y+2	; 0x02
    242a:	28 2f       	mov	r18, r24
    242c:	30 e0       	ldi	r19, 0x00	; 0
    242e:	3d 83       	std	Y+5, r19	; 0x05
    2430:	2c 83       	std	Y+4, r18	; 0x04
    2432:	8c 81       	ldd	r24, Y+4	; 0x04
    2434:	9d 81       	ldd	r25, Y+5	; 0x05
    2436:	81 30       	cpi	r24, 0x01	; 1
    2438:	91 05       	cpc	r25, r1
    243a:	c1 f0       	breq	.+48     	; 0x246c <LCD_moveCursor+0x56>
    243c:	2c 81       	ldd	r18, Y+4	; 0x04
    243e:	3d 81       	ldd	r19, Y+5	; 0x05
    2440:	22 30       	cpi	r18, 0x02	; 2
    2442:	31 05       	cpc	r19, r1
    2444:	2c f4       	brge	.+10     	; 0x2450 <LCD_moveCursor+0x3a>
    2446:	8c 81       	ldd	r24, Y+4	; 0x04
    2448:	9d 81       	ldd	r25, Y+5	; 0x05
    244a:	00 97       	sbiw	r24, 0x00	; 0
    244c:	61 f0       	breq	.+24     	; 0x2466 <LCD_moveCursor+0x50>
    244e:	19 c0       	rjmp	.+50     	; 0x2482 <LCD_moveCursor+0x6c>
    2450:	2c 81       	ldd	r18, Y+4	; 0x04
    2452:	3d 81       	ldd	r19, Y+5	; 0x05
    2454:	22 30       	cpi	r18, 0x02	; 2
    2456:	31 05       	cpc	r19, r1
    2458:	69 f0       	breq	.+26     	; 0x2474 <LCD_moveCursor+0x5e>
    245a:	8c 81       	ldd	r24, Y+4	; 0x04
    245c:	9d 81       	ldd	r25, Y+5	; 0x05
    245e:	83 30       	cpi	r24, 0x03	; 3
    2460:	91 05       	cpc	r25, r1
    2462:	61 f0       	breq	.+24     	; 0x247c <LCD_moveCursor+0x66>
    2464:	0e c0       	rjmp	.+28     	; 0x2482 <LCD_moveCursor+0x6c>
	{
	case 0:
		lcd_memory_address=col;
    2466:	8b 81       	ldd	r24, Y+3	; 0x03
    2468:	89 83       	std	Y+1, r24	; 0x01
    246a:	0b c0       	rjmp	.+22     	; 0x2482 <LCD_moveCursor+0x6c>
		break;
	case 1:
		lcd_memory_address=col+ 0x40;
    246c:	8b 81       	ldd	r24, Y+3	; 0x03
    246e:	80 5c       	subi	r24, 0xC0	; 192
    2470:	89 83       	std	Y+1, r24	; 0x01
    2472:	07 c0       	rjmp	.+14     	; 0x2482 <LCD_moveCursor+0x6c>
		break;
	case 2:
		lcd_memory_address=col+ 0x10;
    2474:	8b 81       	ldd	r24, Y+3	; 0x03
    2476:	80 5f       	subi	r24, 0xF0	; 240
    2478:	89 83       	std	Y+1, r24	; 0x01
    247a:	03 c0       	rjmp	.+6      	; 0x2482 <LCD_moveCursor+0x6c>
		break;
	case 3:
		lcd_memory_address=col+ 0x50;
    247c:	8b 81       	ldd	r24, Y+3	; 0x03
    247e:	80 5b       	subi	r24, 0xB0	; 176
    2480:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	/* Move cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION) ;
    2482:	89 81       	ldd	r24, Y+1	; 0x01
    2484:	80 68       	ori	r24, 0x80	; 128
    2486:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <LCD_sendCommand>
}
    248a:	0f 90       	pop	r0
    248c:	0f 90       	pop	r0
    248e:	0f 90       	pop	r0
    2490:	0f 90       	pop	r0
    2492:	0f 90       	pop	r0
    2494:	cf 91       	pop	r28
    2496:	df 91       	pop	r29
    2498:	08 95       	ret

0000249a <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row, uint8 col, const char *Str)
{
    249a:	df 93       	push	r29
    249c:	cf 93       	push	r28
    249e:	00 d0       	rcall	.+0      	; 0x24a0 <LCD_displayStringRowColumn+0x6>
    24a0:	00 d0       	rcall	.+0      	; 0x24a2 <LCD_displayStringRowColumn+0x8>
    24a2:	cd b7       	in	r28, 0x3d	; 61
    24a4:	de b7       	in	r29, 0x3e	; 62
    24a6:	89 83       	std	Y+1, r24	; 0x01
    24a8:	6a 83       	std	Y+2, r22	; 0x02
    24aa:	5c 83       	std	Y+4, r21	; 0x04
    24ac:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row, col);          /* GO TO Required LCD cursor location */
    24ae:	89 81       	ldd	r24, Y+1	; 0x01
    24b0:	6a 81       	ldd	r22, Y+2	; 0x02
    24b2:	0e 94 0b 12 	call	0x2416	; 0x2416 <LCD_moveCursor>
	LCD_displayString(Str);            /* Display the string */
    24b6:	8b 81       	ldd	r24, Y+3	; 0x03
    24b8:	9c 81       	ldd	r25, Y+4	; 0x04
    24ba:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <LCD_displayString>
}
    24be:	0f 90       	pop	r0
    24c0:	0f 90       	pop	r0
    24c2:	0f 90       	pop	r0
    24c4:	0f 90       	pop	r0
    24c6:	cf 91       	pop	r28
    24c8:	df 91       	pop	r29
    24ca:	08 95       	ret

000024cc <LCD_integerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_integerToString(int data)
{
    24cc:	df 93       	push	r29
    24ce:	cf 93       	push	r28
    24d0:	cd b7       	in	r28, 0x3d	; 61
    24d2:	de b7       	in	r29, 0x3e	; 62
    24d4:	62 97       	sbiw	r28, 0x12	; 18
    24d6:	0f b6       	in	r0, 0x3f	; 63
    24d8:	f8 94       	cli
    24da:	de bf       	out	0x3e, r29	; 62
    24dc:	0f be       	out	0x3f, r0	; 63
    24de:	cd bf       	out	0x3d, r28	; 61
    24e0:	9a 8b       	std	Y+18, r25	; 0x12
    24e2:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16];              /* array (string to hold the ascii result */
	itoa(data,buff,10);      /* use itoa function to convert data to the correspnding ascii,where 10 is the decimal base*/
    24e4:	89 89       	ldd	r24, Y+17	; 0x11
    24e6:	9a 89       	ldd	r25, Y+18	; 0x12
    24e8:	9e 01       	movw	r18, r28
    24ea:	2f 5f       	subi	r18, 0xFF	; 255
    24ec:	3f 4f       	sbci	r19, 0xFF	; 255
    24ee:	b9 01       	movw	r22, r18
    24f0:	4a e0       	ldi	r20, 0x0A	; 10
    24f2:	50 e0       	ldi	r21, 0x00	; 0
    24f4:	0e 94 de 12 	call	0x25bc	; 0x25bc <itoa>
	LCD_displayString(buff);  /* Display the string */
    24f8:	ce 01       	movw	r24, r28
    24fa:	01 96       	adiw	r24, 0x01	; 1
    24fc:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <LCD_displayString>
}
    2500:	62 96       	adiw	r28, 0x12	; 18
    2502:	0f b6       	in	r0, 0x3f	; 63
    2504:	f8 94       	cli
    2506:	de bf       	out	0x3e, r29	; 62
    2508:	0f be       	out	0x3f, r0	; 63
    250a:	cd bf       	out	0x3d, r28	; 61
    250c:	cf 91       	pop	r28
    250e:	df 91       	pop	r29
    2510:	08 95       	ret

00002512 <clearScreen>:
/*
 * Description :
 * Clear the screen command
 */
void clearScreen(void)
{
    2512:	df 93       	push	r29
    2514:	cf 93       	push	r28
    2516:	cd b7       	in	r28, 0x3d	; 61
    2518:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    251a:	81 e0       	ldi	r24, 0x01	; 1
    251c:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <LCD_sendCommand>
}
    2520:	cf 91       	pop	r28
    2522:	df 91       	pop	r29
    2524:	08 95       	ret

00002526 <__udivmodhi4>:
    2526:	aa 1b       	sub	r26, r26
    2528:	bb 1b       	sub	r27, r27
    252a:	51 e1       	ldi	r21, 0x11	; 17
    252c:	07 c0       	rjmp	.+14     	; 0x253c <__udivmodhi4_ep>

0000252e <__udivmodhi4_loop>:
    252e:	aa 1f       	adc	r26, r26
    2530:	bb 1f       	adc	r27, r27
    2532:	a6 17       	cp	r26, r22
    2534:	b7 07       	cpc	r27, r23
    2536:	10 f0       	brcs	.+4      	; 0x253c <__udivmodhi4_ep>
    2538:	a6 1b       	sub	r26, r22
    253a:	b7 0b       	sbc	r27, r23

0000253c <__udivmodhi4_ep>:
    253c:	88 1f       	adc	r24, r24
    253e:	99 1f       	adc	r25, r25
    2540:	5a 95       	dec	r21
    2542:	a9 f7       	brne	.-22     	; 0x252e <__udivmodhi4_loop>
    2544:	80 95       	com	r24
    2546:	90 95       	com	r25
    2548:	bc 01       	movw	r22, r24
    254a:	cd 01       	movw	r24, r26
    254c:	08 95       	ret

0000254e <__prologue_saves__>:
    254e:	2f 92       	push	r2
    2550:	3f 92       	push	r3
    2552:	4f 92       	push	r4
    2554:	5f 92       	push	r5
    2556:	6f 92       	push	r6
    2558:	7f 92       	push	r7
    255a:	8f 92       	push	r8
    255c:	9f 92       	push	r9
    255e:	af 92       	push	r10
    2560:	bf 92       	push	r11
    2562:	cf 92       	push	r12
    2564:	df 92       	push	r13
    2566:	ef 92       	push	r14
    2568:	ff 92       	push	r15
    256a:	0f 93       	push	r16
    256c:	1f 93       	push	r17
    256e:	cf 93       	push	r28
    2570:	df 93       	push	r29
    2572:	cd b7       	in	r28, 0x3d	; 61
    2574:	de b7       	in	r29, 0x3e	; 62
    2576:	ca 1b       	sub	r28, r26
    2578:	db 0b       	sbc	r29, r27
    257a:	0f b6       	in	r0, 0x3f	; 63
    257c:	f8 94       	cli
    257e:	de bf       	out	0x3e, r29	; 62
    2580:	0f be       	out	0x3f, r0	; 63
    2582:	cd bf       	out	0x3d, r28	; 61
    2584:	09 94       	ijmp

00002586 <__epilogue_restores__>:
    2586:	2a 88       	ldd	r2, Y+18	; 0x12
    2588:	39 88       	ldd	r3, Y+17	; 0x11
    258a:	48 88       	ldd	r4, Y+16	; 0x10
    258c:	5f 84       	ldd	r5, Y+15	; 0x0f
    258e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2590:	7d 84       	ldd	r7, Y+13	; 0x0d
    2592:	8c 84       	ldd	r8, Y+12	; 0x0c
    2594:	9b 84       	ldd	r9, Y+11	; 0x0b
    2596:	aa 84       	ldd	r10, Y+10	; 0x0a
    2598:	b9 84       	ldd	r11, Y+9	; 0x09
    259a:	c8 84       	ldd	r12, Y+8	; 0x08
    259c:	df 80       	ldd	r13, Y+7	; 0x07
    259e:	ee 80       	ldd	r14, Y+6	; 0x06
    25a0:	fd 80       	ldd	r15, Y+5	; 0x05
    25a2:	0c 81       	ldd	r16, Y+4	; 0x04
    25a4:	1b 81       	ldd	r17, Y+3	; 0x03
    25a6:	aa 81       	ldd	r26, Y+2	; 0x02
    25a8:	b9 81       	ldd	r27, Y+1	; 0x01
    25aa:	ce 0f       	add	r28, r30
    25ac:	d1 1d       	adc	r29, r1
    25ae:	0f b6       	in	r0, 0x3f	; 63
    25b0:	f8 94       	cli
    25b2:	de bf       	out	0x3e, r29	; 62
    25b4:	0f be       	out	0x3f, r0	; 63
    25b6:	cd bf       	out	0x3d, r28	; 61
    25b8:	ed 01       	movw	r28, r26
    25ba:	08 95       	ret

000025bc <itoa>:
    25bc:	fb 01       	movw	r30, r22
    25be:	9f 01       	movw	r18, r30
    25c0:	e8 94       	clt
    25c2:	42 30       	cpi	r20, 0x02	; 2
    25c4:	c4 f0       	brlt	.+48     	; 0x25f6 <itoa+0x3a>
    25c6:	45 32       	cpi	r20, 0x25	; 37
    25c8:	b4 f4       	brge	.+44     	; 0x25f6 <itoa+0x3a>
    25ca:	4a 30       	cpi	r20, 0x0A	; 10
    25cc:	29 f4       	brne	.+10     	; 0x25d8 <itoa+0x1c>
    25ce:	97 fb       	bst	r25, 7
    25d0:	1e f4       	brtc	.+6      	; 0x25d8 <itoa+0x1c>
    25d2:	90 95       	com	r25
    25d4:	81 95       	neg	r24
    25d6:	9f 4f       	sbci	r25, 0xFF	; 255
    25d8:	64 2f       	mov	r22, r20
    25da:	77 27       	eor	r23, r23
    25dc:	0e 94 93 12 	call	0x2526	; 0x2526 <__udivmodhi4>
    25e0:	80 5d       	subi	r24, 0xD0	; 208
    25e2:	8a 33       	cpi	r24, 0x3A	; 58
    25e4:	0c f0       	brlt	.+2      	; 0x25e8 <itoa+0x2c>
    25e6:	89 5d       	subi	r24, 0xD9	; 217
    25e8:	81 93       	st	Z+, r24
    25ea:	cb 01       	movw	r24, r22
    25ec:	00 97       	sbiw	r24, 0x00	; 0
    25ee:	a1 f7       	brne	.-24     	; 0x25d8 <itoa+0x1c>
    25f0:	16 f4       	brtc	.+4      	; 0x25f6 <itoa+0x3a>
    25f2:	5d e2       	ldi	r21, 0x2D	; 45
    25f4:	51 93       	st	Z+, r21
    25f6:	10 82       	st	Z, r1
    25f8:	c9 01       	movw	r24, r18
    25fa:	0c 94 ff 12 	jmp	0x25fe	; 0x25fe <strrev>

000025fe <strrev>:
    25fe:	dc 01       	movw	r26, r24
    2600:	fc 01       	movw	r30, r24
    2602:	67 2f       	mov	r22, r23
    2604:	71 91       	ld	r23, Z+
    2606:	77 23       	and	r23, r23
    2608:	e1 f7       	brne	.-8      	; 0x2602 <strrev+0x4>
    260a:	32 97       	sbiw	r30, 0x02	; 2
    260c:	04 c0       	rjmp	.+8      	; 0x2616 <strrev+0x18>
    260e:	7c 91       	ld	r23, X
    2610:	6d 93       	st	X+, r22
    2612:	70 83       	st	Z, r23
    2614:	62 91       	ld	r22, -Z
    2616:	ae 17       	cp	r26, r30
    2618:	bf 07       	cpc	r27, r31
    261a:	c8 f3       	brcs	.-14     	; 0x260e <strrev+0x10>
    261c:	08 95       	ret

0000261e <_exit>:
    261e:	f8 94       	cli

00002620 <__stop_program>:
    2620:	ff cf       	rjmp	.-2      	; 0x2620 <__stop_program>
